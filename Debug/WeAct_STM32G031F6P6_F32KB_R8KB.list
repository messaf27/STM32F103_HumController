
WeAct_STM32G031F6P6_F32KB_R8KB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022d4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08002390  08002390  00012390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800243c  0800243c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800243c  0800243c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800243c  0800243c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800243c  0800243c  0001243c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002440  08002440  00012440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08002444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000060  080024a4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  080024a4  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   000051b0  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000172d  00000000  00000000  0002527b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000758  00000000  00000000  000269a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000054a  00000000  00000000  00027100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011617  00000000  00000000  0002764a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006f96  00000000  00000000  00038c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005938d  00000000  00000000  0003fbf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001e5c  00000000  00000000  00098f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0009ade0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000060 	.word	0x20000060
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002378 	.word	0x08002378

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000064 	.word	0x20000064
 8000100:	08002378 	.word	0x08002378

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <LL_CRC_SetPolynomialSize>:
  *         @arg @ref LL_CRC_POLYLENGTH_8B
  *         @arg @ref LL_CRC_POLYLENGTH_7B
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialSize(CRC_TypeDef *CRCx, uint32_t PolySize)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	689b      	ldr	r3, [r3, #8]
 800022a:	2218      	movs	r2, #24
 800022c:	4393      	bics	r3, r2
 800022e:	001a      	movs	r2, r3
 8000230:	683b      	ldr	r3, [r7, #0]
 8000232:	431a      	orrs	r2, r3
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	609a      	str	r2, [r3, #8]
}
 8000238:	46c0      	nop			; (mov r8, r8)
 800023a:	46bd      	mov	sp, r7
 800023c:	b002      	add	sp, #8
 800023e:	bd80      	pop	{r7, pc}

08000240 <LL_CRC_SetInputDataReverseMode>:
  *         @arg @ref LL_CRC_INDATA_REVERSE_HALFWORD
  *         @arg @ref LL_CRC_INDATA_REVERSE_WORD
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetInputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
 8000248:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_REV_IN, ReverseMode);
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	689b      	ldr	r3, [r3, #8]
 800024e:	2260      	movs	r2, #96	; 0x60
 8000250:	4393      	bics	r3, r2
 8000252:	001a      	movs	r2, r3
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	431a      	orrs	r2, r3
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	609a      	str	r2, [r3, #8]
}
 800025c:	46c0      	nop			; (mov r8, r8)
 800025e:	46bd      	mov	sp, r7
 8000260:	b002      	add	sp, #8
 8000262:	bd80      	pop	{r7, pc}

08000264 <LL_CRC_SetOutputDataReverseMode>:
  *         @arg @ref LL_CRC_OUTDATA_REVERSE_NONE
  *         @arg @ref LL_CRC_OUTDATA_REVERSE_BIT
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetOutputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
 800026c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_REV_OUT, ReverseMode);
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	689b      	ldr	r3, [r3, #8]
 8000272:	2280      	movs	r2, #128	; 0x80
 8000274:	4393      	bics	r3, r2
 8000276:	001a      	movs	r2, r3
 8000278:	683b      	ldr	r3, [r7, #0]
 800027a:	431a      	orrs	r2, r3
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	609a      	str	r2, [r3, #8]
}
 8000280:	46c0      	nop			; (mov r8, r8)
 8000282:	46bd      	mov	sp, r7
 8000284:	b002      	add	sp, #8
 8000286:	bd80      	pop	{r7, pc}

08000288 <LL_CRC_SetInitialData>:
  * @param  CRCx CRC Instance
  * @param  InitCrc Value to be programmed in Programmable initial CRC value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetInitialData(CRC_TypeDef *CRCx, uint32_t InitCrc)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->INIT, InitCrc);
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	683a      	ldr	r2, [r7, #0]
 8000296:	611a      	str	r2, [r3, #16]
}
 8000298:	46c0      	nop			; (mov r8, r8)
 800029a:	46bd      	mov	sp, r7
 800029c:	b002      	add	sp, #8
 800029e:	bd80      	pop	{r7, pc}

080002a0 <LL_CRC_SetPolynomialCoef>:
  * @param  CRCx CRC Instance
  * @param  PolynomCoef Value to be programmed in Programmable Polynomial value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialCoef(CRC_TypeDef *CRCx, uint32_t PolynomCoef)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->POL, PolynomCoef);
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	683a      	ldr	r2, [r7, #0]
 80002ae:	615a      	str	r2, [r3, #20]
}
 80002b0:	46c0      	nop			; (mov r8, r8)
 80002b2:	46bd      	mov	sp, r7
 80002b4:	b002      	add	sp, #8
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_RNG  (*)
  * @note   (*) RNG & CRYP Peripherals available only on STM32G081xx
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b084      	sub	sp, #16
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80002c0:	4b07      	ldr	r3, [pc, #28]	; (80002e0 <LL_AHB1_GRP1_EnableClock+0x28>)
 80002c2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80002c4:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <LL_AHB1_GRP1_EnableClock+0x28>)
 80002c6:	687a      	ldr	r2, [r7, #4]
 80002c8:	430a      	orrs	r2, r1
 80002ca:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80002cc:	4b04      	ldr	r3, [pc, #16]	; (80002e0 <LL_AHB1_GRP1_EnableClock+0x28>)
 80002ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80002d0:	687a      	ldr	r2, [r7, #4]
 80002d2:	4013      	ands	r3, r2
 80002d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002d6:	68fb      	ldr	r3, [r7, #12]
}
 80002d8:	46c0      	nop			; (mov r8, r8)
 80002da:	46bd      	mov	sp, r7
 80002dc:	b004      	add	sp, #16
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	40021000 	.word	0x40021000

080002e4 <MX_CRC_Init>:

/* USER CODE END 0 */

/* CRC init function */
void MX_CRC_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CRC_Init 0 */

  /* USER CODE END CRC_Init 0 */

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 80002e8:	2380      	movs	r3, #128	; 0x80
 80002ea:	015b      	lsls	r3, r3, #5
 80002ec:	0018      	movs	r0, r3
 80002ee:	f7ff ffe3 	bl	80002b8 <LL_AHB1_GRP1_EnableClock>

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  LL_CRC_SetInputDataReverseMode(CRC, LL_CRC_INDATA_REVERSE_NONE);
 80002f2:	4b0f      	ldr	r3, [pc, #60]	; (8000330 <MX_CRC_Init+0x4c>)
 80002f4:	2100      	movs	r1, #0
 80002f6:	0018      	movs	r0, r3
 80002f8:	f7ff ffa2 	bl	8000240 <LL_CRC_SetInputDataReverseMode>
  LL_CRC_SetOutputDataReverseMode(CRC, LL_CRC_OUTDATA_REVERSE_NONE);
 80002fc:	4b0c      	ldr	r3, [pc, #48]	; (8000330 <MX_CRC_Init+0x4c>)
 80002fe:	2100      	movs	r1, #0
 8000300:	0018      	movs	r0, r3
 8000302:	f7ff ffaf 	bl	8000264 <LL_CRC_SetOutputDataReverseMode>
  LL_CRC_SetPolynomialCoef(CRC, LL_CRC_DEFAULT_CRC32_POLY);
 8000306:	4a0b      	ldr	r2, [pc, #44]	; (8000334 <MX_CRC_Init+0x50>)
 8000308:	4b09      	ldr	r3, [pc, #36]	; (8000330 <MX_CRC_Init+0x4c>)
 800030a:	0011      	movs	r1, r2
 800030c:	0018      	movs	r0, r3
 800030e:	f7ff ffc7 	bl	80002a0 <LL_CRC_SetPolynomialCoef>
  LL_CRC_SetPolynomialSize(CRC, LL_CRC_POLYLENGTH_32B);
 8000312:	4b07      	ldr	r3, [pc, #28]	; (8000330 <MX_CRC_Init+0x4c>)
 8000314:	2100      	movs	r1, #0
 8000316:	0018      	movs	r0, r3
 8000318:	f7ff ff80 	bl	800021c <LL_CRC_SetPolynomialSize>
  LL_CRC_SetInitialData(CRC, LL_CRC_DEFAULT_CRC_INITVALUE);
 800031c:	2301      	movs	r3, #1
 800031e:	425b      	negs	r3, r3
 8000320:	4a03      	ldr	r2, [pc, #12]	; (8000330 <MX_CRC_Init+0x4c>)
 8000322:	0019      	movs	r1, r3
 8000324:	0010      	movs	r0, r2
 8000326:	f7ff ffaf 	bl	8000288 <LL_CRC_SetInitialData>
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	40023000 	.word	0x40023000
 8000334:	04c11db7 	.word	0x04c11db7

08000338 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000340:	4b07      	ldr	r3, [pc, #28]	; (8000360 <LL_IOP_GRP1_EnableClock+0x28>)
 8000342:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000344:	4b06      	ldr	r3, [pc, #24]	; (8000360 <LL_IOP_GRP1_EnableClock+0x28>)
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	430a      	orrs	r2, r1
 800034a:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800034c:	4b04      	ldr	r3, [pc, #16]	; (8000360 <LL_IOP_GRP1_EnableClock+0x28>)
 800034e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000350:	687a      	ldr	r2, [r7, #4]
 8000352:	4013      	ands	r3, r2
 8000354:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000356:	68fb      	ldr	r3, [r7, #12]
}
 8000358:	46c0      	nop			; (mov r8, r8)
 800035a:	46bd      	mov	sp, r7
 800035c:	b004      	add	sp, #16
 800035e:	bd80      	pop	{r7, pc}
 8000360:	40021000 	.word	0x40021000

08000364 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
 800036c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	683a      	ldr	r2, [r7, #0]
 8000372:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000374:	46c0      	nop			; (mov r8, r8)
 8000376:	46bd      	mov	sp, r7
 8000378:	b002      	add	sp, #8
 800037a:	bd80      	pop	{r7, pc}

0800037c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b086      	sub	sp, #24
 8000380:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000382:	003b      	movs	r3, r7
 8000384:	0018      	movs	r0, r3
 8000386:	2318      	movs	r3, #24
 8000388:	001a      	movs	r2, r3
 800038a:	2100      	movs	r1, #0
 800038c:	f001 fd20 	bl	8001dd0 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000390:	2002      	movs	r0, #2
 8000392:	f7ff ffd1 	bl	8000338 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000396:	2004      	movs	r0, #4
 8000398:	f7ff ffce 	bl	8000338 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 800039c:	2001      	movs	r0, #1
 800039e:	f7ff ffcb 	bl	8000338 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(RS_DIR_GPIO_Port, RS_DIR_Pin);
 80003a2:	2380      	movs	r3, #128	; 0x80
 80003a4:	01db      	lsls	r3, r3, #7
 80003a6:	4a1d      	ldr	r2, [pc, #116]	; (800041c <MX_GPIO_Init+0xa0>)
 80003a8:	0019      	movs	r1, r3
 80003aa:	0010      	movs	r0, r2
 80003ac:	f7ff ffda 	bl	8000364 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 80003b0:	23a0      	movs	r3, #160	; 0xa0
 80003b2:	05db      	lsls	r3, r3, #23
 80003b4:	2110      	movs	r1, #16
 80003b6:	0018      	movs	r0, r3
 80003b8:	f7ff ffd4 	bl	8000364 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = RS_DIR_Pin;
 80003bc:	003b      	movs	r3, r7
 80003be:	2280      	movs	r2, #128	; 0x80
 80003c0:	01d2      	lsls	r2, r2, #7
 80003c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80003c4:	003b      	movs	r3, r7
 80003c6:	2201      	movs	r2, #1
 80003c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80003ca:	003b      	movs	r3, r7
 80003cc:	2200      	movs	r2, #0
 80003ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80003d0:	003b      	movs	r3, r7
 80003d2:	2200      	movs	r2, #0
 80003d4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80003d6:	003b      	movs	r3, r7
 80003d8:	2200      	movs	r2, #0
 80003da:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(RS_DIR_GPIO_Port, &GPIO_InitStruct);
 80003dc:	003b      	movs	r3, r7
 80003de:	4a0f      	ldr	r2, [pc, #60]	; (800041c <MX_GPIO_Init+0xa0>)
 80003e0:	0019      	movs	r1, r3
 80003e2:	0010      	movs	r0, r2
 80003e4:	f000 fea2 	bl	800112c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 80003e8:	003b      	movs	r3, r7
 80003ea:	2210      	movs	r2, #16
 80003ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80003ee:	003b      	movs	r3, r7
 80003f0:	2201      	movs	r2, #1
 80003f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80003f4:	003b      	movs	r3, r7
 80003f6:	2200      	movs	r2, #0
 80003f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80003fa:	003b      	movs	r3, r7
 80003fc:	2200      	movs	r2, #0
 80003fe:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000400:	003b      	movs	r3, r7
 8000402:	2200      	movs	r2, #0
 8000404:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000406:	003a      	movs	r2, r7
 8000408:	23a0      	movs	r3, #160	; 0xa0
 800040a:	05db      	lsls	r3, r3, #23
 800040c:	0011      	movs	r1, r2
 800040e:	0018      	movs	r0, r3
 8000410:	f000 fe8c 	bl	800112c <LL_GPIO_Init>

}
 8000414:	46c0      	nop			; (mov r8, r8)
 8000416:	46bd      	mov	sp, r7
 8000418:	b006      	add	sp, #24
 800041a:	bd80      	pop	{r7, pc}
 800041c:	50000800 	.word	0x50000800

08000420 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a03      	ldr	r2, [pc, #12]	; (800043c <LL_I2C_EnableClockStretching+0x1c>)
 800042e:	401a      	ands	r2, r3
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	601a      	str	r2, [r3, #0]
}
 8000434:	46c0      	nop			; (mov r8, r8)
 8000436:	46bd      	mov	sp, r7
 8000438:	b002      	add	sp, #8
 800043a:	bd80      	pop	{r7, pc}
 800043c:	fffdffff 	.word	0xfffdffff

08000440 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a03      	ldr	r2, [pc, #12]	; (800045c <LL_I2C_DisableGeneralCall+0x1c>)
 800044e:	401a      	ands	r2, r3
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	601a      	str	r2, [r3, #0]
}
 8000454:	46c0      	nop			; (mov r8, r8)
 8000456:	46bd      	mov	sp, r7
 8000458:	b002      	add	sp, #8
 800045a:	bd80      	pop	{r7, pc}
 800045c:	fff7ffff 	.word	0xfff7ffff

08000460 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b084      	sub	sp, #16
 8000464:	af00      	add	r7, sp, #0
 8000466:	60f8      	str	r0, [r7, #12]
 8000468:	60b9      	str	r1, [r7, #8]
 800046a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	68db      	ldr	r3, [r3, #12]
 8000470:	4a05      	ldr	r2, [pc, #20]	; (8000488 <LL_I2C_SetOwnAddress2+0x28>)
 8000472:	401a      	ands	r2, r3
 8000474:	68b9      	ldr	r1, [r7, #8]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	430b      	orrs	r3, r1
 800047a:	431a      	orrs	r2, r3
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	60da      	str	r2, [r3, #12]
}
 8000480:	46c0      	nop			; (mov r8, r8)
 8000482:	46bd      	mov	sp, r7
 8000484:	b004      	add	sp, #16
 8000486:	bd80      	pop	{r7, pc}
 8000488:	fffff801 	.word	0xfffff801

0800048c <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	68db      	ldr	r3, [r3, #12]
 8000498:	4a03      	ldr	r2, [pc, #12]	; (80004a8 <LL_I2C_DisableOwnAddress2+0x1c>)
 800049a:	401a      	ands	r2, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	60da      	str	r2, [r3, #12]
}
 80004a0:	46c0      	nop			; (mov r8, r8)
 80004a2:	46bd      	mov	sp, r7
 80004a4:	b002      	add	sp, #8
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	ffff7fff 	.word	0xffff7fff

080004ac <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	685b      	ldr	r3, [r3, #4]
 80004b8:	2280      	movs	r2, #128	; 0x80
 80004ba:	0492      	lsls	r2, r2, #18
 80004bc:	431a      	orrs	r2, r3
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	605a      	str	r2, [r3, #4]
}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	46bd      	mov	sp, r7
 80004c6:	b002      	add	sp, #8
 80004c8:	bd80      	pop	{r7, pc}
	...

080004cc <LL_APB1_GRP1_EnableClock>:
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 80004d4:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <LL_APB1_GRP1_EnableClock+0x28>)
 80004d6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <LL_APB1_GRP1_EnableClock+0x28>)
 80004da:	687a      	ldr	r2, [r7, #4]
 80004dc:	430a      	orrs	r2, r1
 80004de:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80004e0:	4b04      	ldr	r3, [pc, #16]	; (80004f4 <LL_APB1_GRP1_EnableClock+0x28>)
 80004e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	4013      	ands	r3, r2
 80004e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004ea:	68fb      	ldr	r3, [r7, #12]
}
 80004ec:	46c0      	nop			; (mov r8, r8)
 80004ee:	46bd      	mov	sp, r7
 80004f0:	b004      	add	sp, #16
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40021000 	.word	0x40021000

080004f8 <LL_IOP_GRP1_EnableClock>:
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8000500:	4b07      	ldr	r3, [pc, #28]	; (8000520 <LL_IOP_GRP1_EnableClock+0x28>)
 8000502:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <LL_IOP_GRP1_EnableClock+0x28>)
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	430a      	orrs	r2, r1
 800050a:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800050c:	4b04      	ldr	r3, [pc, #16]	; (8000520 <LL_IOP_GRP1_EnableClock+0x28>)
 800050e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	4013      	ands	r3, r2
 8000514:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000516:	68fb      	ldr	r3, [r7, #12]
}
 8000518:	46c0      	nop			; (mov r8, r8)
 800051a:	46bd      	mov	sp, r7
 800051c:	b004      	add	sp, #16
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40021000 	.word	0x40021000

08000524 <MX_I2C2_Init>:

/* USER CODE END 0 */

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000524:	b590      	push	{r4, r7, lr}
 8000526:	b08f      	sub	sp, #60	; 0x3c
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800052a:	241c      	movs	r4, #28
 800052c:	193b      	adds	r3, r7, r4
 800052e:	0018      	movs	r0, r3
 8000530:	231c      	movs	r3, #28
 8000532:	001a      	movs	r2, r3
 8000534:	2100      	movs	r1, #0
 8000536:	f001 fc4b 	bl	8001dd0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	0018      	movs	r0, r3
 800053e:	2318      	movs	r3, #24
 8000540:	001a      	movs	r2, r3
 8000542:	2100      	movs	r1, #0
 8000544:	f001 fc44 	bl	8001dd0 <memset>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000548:	2001      	movs	r0, #1
 800054a:	f7ff ffd5 	bl	80004f8 <LL_IOP_GRP1_EnableClock>
  /**I2C2 GPIO Configuration
  PA11 [PA9]   ------> I2C2_SCL
  PA12 [PA10]   ------> I2C2_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	2280      	movs	r2, #128	; 0x80
 8000552:	0112      	lsls	r2, r2, #4
 8000554:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	2202      	movs	r2, #2
 800055a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	2201      	movs	r2, #1
 8000566:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2200      	movs	r2, #0
 800056c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	2206      	movs	r2, #6
 8000572:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000574:	1d3a      	adds	r2, r7, #4
 8000576:	23a0      	movs	r3, #160	; 0xa0
 8000578:	05db      	lsls	r3, r3, #23
 800057a:	0011      	movs	r1, r2
 800057c:	0018      	movs	r0, r3
 800057e:	f000 fdd5 	bl	800112c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	2280      	movs	r2, #128	; 0x80
 8000586:	0152      	lsls	r2, r2, #5
 8000588:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	2202      	movs	r2, #2
 800058e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	2201      	movs	r2, #1
 800059a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2200      	movs	r2, #0
 80005a0:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2206      	movs	r2, #6
 80005a6:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a8:	1d3a      	adds	r2, r7, #4
 80005aa:	23a0      	movs	r3, #160	; 0xa0
 80005ac:	05db      	lsls	r3, r3, #23
 80005ae:	0011      	movs	r1, r2
 80005b0:	0018      	movs	r0, r3
 80005b2:	f000 fdbb 	bl	800112c <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 80005b6:	2380      	movs	r3, #128	; 0x80
 80005b8:	03db      	lsls	r3, r3, #15
 80005ba:	0018      	movs	r0, r3
 80005bc:	f7ff ff86 	bl	80004cc <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C2_Init 1 */

  /** I2C Initialization
  */
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80005c0:	0021      	movs	r1, r4
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
  I2C_InitStruct.Timing = 0x10707DBC;
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	4a18      	ldr	r2, [pc, #96]	; (800062c <MX_I2C2_Init+0x108>)
 80005cc:	605a      	str	r2, [r3, #4]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  I2C_InitStruct.DigitalFilter = 0;
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
  I2C_InitStruct.OwnAddress1 = 0;
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	2200      	movs	r2, #0
 80005e4:	615a      	str	r2, [r3, #20]
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	4a10      	ldr	r2, [pc, #64]	; (8000630 <MX_I2C2_Init+0x10c>)
 80005f0:	0019      	movs	r1, r3
 80005f2:	0010      	movs	r0, r2
 80005f4:	f000 fe92 	bl	800131c <LL_I2C_Init>
  LL_I2C_EnableAutoEndMode(I2C2);
 80005f8:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <MX_I2C2_Init+0x10c>)
 80005fa:	0018      	movs	r0, r3
 80005fc:	f7ff ff56 	bl	80004ac <LL_I2C_EnableAutoEndMode>
  LL_I2C_SetOwnAddress2(I2C2, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8000600:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <MX_I2C2_Init+0x10c>)
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	0018      	movs	r0, r3
 8000608:	f7ff ff2a 	bl	8000460 <LL_I2C_SetOwnAddress2>
  LL_I2C_DisableOwnAddress2(I2C2);
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <MX_I2C2_Init+0x10c>)
 800060e:	0018      	movs	r0, r3
 8000610:	f7ff ff3c 	bl	800048c <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_I2C2_Init+0x10c>)
 8000616:	0018      	movs	r0, r3
 8000618:	f7ff ff12 	bl	8000440 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 800061c:	4b04      	ldr	r3, [pc, #16]	; (8000630 <MX_I2C2_Init+0x10c>)
 800061e:	0018      	movs	r0, r3
 8000620:	f7ff fefe 	bl	8000420 <LL_I2C_EnableClockStretching>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000624:	46c0      	nop			; (mov r8, r8)
 8000626:	46bd      	mov	sp, r7
 8000628:	b00f      	add	sp, #60	; 0x3c
 800062a:	bd90      	pop	{r4, r7, pc}
 800062c:	10707dbc 	.word	0x10707dbc
 8000630:	40005800 	.word	0x40005800

08000634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	0002      	movs	r2, r0
 800063c:	6039      	str	r1, [r7, #0]
 800063e:	1dfb      	adds	r3, r7, #7
 8000640:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000642:	1dfb      	adds	r3, r7, #7
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b7f      	cmp	r3, #127	; 0x7f
 8000648:	d828      	bhi.n	800069c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800064a:	4a2f      	ldr	r2, [pc, #188]	; (8000708 <__NVIC_SetPriority+0xd4>)
 800064c:	1dfb      	adds	r3, r7, #7
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	b25b      	sxtb	r3, r3
 8000652:	089b      	lsrs	r3, r3, #2
 8000654:	33c0      	adds	r3, #192	; 0xc0
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	589b      	ldr	r3, [r3, r2]
 800065a:	1dfa      	adds	r2, r7, #7
 800065c:	7812      	ldrb	r2, [r2, #0]
 800065e:	0011      	movs	r1, r2
 8000660:	2203      	movs	r2, #3
 8000662:	400a      	ands	r2, r1
 8000664:	00d2      	lsls	r2, r2, #3
 8000666:	21ff      	movs	r1, #255	; 0xff
 8000668:	4091      	lsls	r1, r2
 800066a:	000a      	movs	r2, r1
 800066c:	43d2      	mvns	r2, r2
 800066e:	401a      	ands	r2, r3
 8000670:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	019b      	lsls	r3, r3, #6
 8000676:	22ff      	movs	r2, #255	; 0xff
 8000678:	401a      	ands	r2, r3
 800067a:	1dfb      	adds	r3, r7, #7
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	0018      	movs	r0, r3
 8000680:	2303      	movs	r3, #3
 8000682:	4003      	ands	r3, r0
 8000684:	00db      	lsls	r3, r3, #3
 8000686:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000688:	481f      	ldr	r0, [pc, #124]	; (8000708 <__NVIC_SetPriority+0xd4>)
 800068a:	1dfb      	adds	r3, r7, #7
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	b25b      	sxtb	r3, r3
 8000690:	089b      	lsrs	r3, r3, #2
 8000692:	430a      	orrs	r2, r1
 8000694:	33c0      	adds	r3, #192	; 0xc0
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800069a:	e031      	b.n	8000700 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800069c:	4a1b      	ldr	r2, [pc, #108]	; (800070c <__NVIC_SetPriority+0xd8>)
 800069e:	1dfb      	adds	r3, r7, #7
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	0019      	movs	r1, r3
 80006a4:	230f      	movs	r3, #15
 80006a6:	400b      	ands	r3, r1
 80006a8:	3b08      	subs	r3, #8
 80006aa:	089b      	lsrs	r3, r3, #2
 80006ac:	3306      	adds	r3, #6
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	18d3      	adds	r3, r2, r3
 80006b2:	3304      	adds	r3, #4
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	1dfa      	adds	r2, r7, #7
 80006b8:	7812      	ldrb	r2, [r2, #0]
 80006ba:	0011      	movs	r1, r2
 80006bc:	2203      	movs	r2, #3
 80006be:	400a      	ands	r2, r1
 80006c0:	00d2      	lsls	r2, r2, #3
 80006c2:	21ff      	movs	r1, #255	; 0xff
 80006c4:	4091      	lsls	r1, r2
 80006c6:	000a      	movs	r2, r1
 80006c8:	43d2      	mvns	r2, r2
 80006ca:	401a      	ands	r2, r3
 80006cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	019b      	lsls	r3, r3, #6
 80006d2:	22ff      	movs	r2, #255	; 0xff
 80006d4:	401a      	ands	r2, r3
 80006d6:	1dfb      	adds	r3, r7, #7
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	0018      	movs	r0, r3
 80006dc:	2303      	movs	r3, #3
 80006de:	4003      	ands	r3, r0
 80006e0:	00db      	lsls	r3, r3, #3
 80006e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006e4:	4809      	ldr	r0, [pc, #36]	; (800070c <__NVIC_SetPriority+0xd8>)
 80006e6:	1dfb      	adds	r3, r7, #7
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	001c      	movs	r4, r3
 80006ec:	230f      	movs	r3, #15
 80006ee:	4023      	ands	r3, r4
 80006f0:	3b08      	subs	r3, #8
 80006f2:	089b      	lsrs	r3, r3, #2
 80006f4:	430a      	orrs	r2, r1
 80006f6:	3306      	adds	r3, #6
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	18c3      	adds	r3, r0, r3
 80006fc:	3304      	adds	r3, #4
 80006fe:	601a      	str	r2, [r3, #0]
}
 8000700:	46c0      	nop			; (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	b003      	add	sp, #12
 8000706:	bd90      	pop	{r4, r7, pc}
 8000708:	e000e100 	.word	0xe000e100
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000714:	4b04      	ldr	r3, [pc, #16]	; (8000728 <LL_RCC_HSI_Enable+0x18>)
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	4b03      	ldr	r3, [pc, #12]	; (8000728 <LL_RCC_HSI_Enable+0x18>)
 800071a:	2180      	movs	r1, #128	; 0x80
 800071c:	0049      	lsls	r1, r1, #1
 800071e:	430a      	orrs	r2, r1
 8000720:	601a      	str	r2, [r3, #0]
}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40021000 	.word	0x40021000

0800072c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000730:	4b07      	ldr	r3, [pc, #28]	; (8000750 <LL_RCC_HSI_IsReady+0x24>)
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	2380      	movs	r3, #128	; 0x80
 8000736:	00db      	lsls	r3, r3, #3
 8000738:	401a      	ands	r2, r3
 800073a:	2380      	movs	r3, #128	; 0x80
 800073c:	00db      	lsls	r3, r3, #3
 800073e:	429a      	cmp	r2, r3
 8000740:	d101      	bne.n	8000746 <LL_RCC_HSI_IsReady+0x1a>
 8000742:	2301      	movs	r3, #1
 8000744:	e000      	b.n	8000748 <LL_RCC_HSI_IsReady+0x1c>
 8000746:	2300      	movs	r3, #0
}
 8000748:	0018      	movs	r0, r3
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	40021000 	.word	0x40021000

08000754 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <LL_RCC_SetSysClkSource+0x24>)
 800075e:	689b      	ldr	r3, [r3, #8]
 8000760:	2207      	movs	r2, #7
 8000762:	4393      	bics	r3, r2
 8000764:	0019      	movs	r1, r3
 8000766:	4b04      	ldr	r3, [pc, #16]	; (8000778 <LL_RCC_SetSysClkSource+0x24>)
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	430a      	orrs	r2, r1
 800076c:	609a      	str	r2, [r3, #8]
}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	46bd      	mov	sp, r7
 8000772:	b002      	add	sp, #8
 8000774:	bd80      	pop	{r7, pc}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	40021000 	.word	0x40021000

0800077c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000780:	4b03      	ldr	r3, [pc, #12]	; (8000790 <LL_RCC_GetSysClkSource+0x14>)
 8000782:	689b      	ldr	r3, [r3, #8]
 8000784:	2238      	movs	r2, #56	; 0x38
 8000786:	4013      	ands	r3, r2
}
 8000788:	0018      	movs	r0, r3
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	40021000 	.word	0x40021000

08000794 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <LL_RCC_SetAHBPrescaler+0x24>)
 800079e:	689b      	ldr	r3, [r3, #8]
 80007a0:	4a06      	ldr	r2, [pc, #24]	; (80007bc <LL_RCC_SetAHBPrescaler+0x28>)
 80007a2:	4013      	ands	r3, r2
 80007a4:	0019      	movs	r1, r3
 80007a6:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <LL_RCC_SetAHBPrescaler+0x24>)
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	430a      	orrs	r2, r1
 80007ac:	609a      	str	r2, [r3, #8]
}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b002      	add	sp, #8
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	40021000 	.word	0x40021000
 80007bc:	fffff0ff 	.word	0xfffff0ff

080007c0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80007ca:	689b      	ldr	r3, [r3, #8]
 80007cc:	4a06      	ldr	r2, [pc, #24]	; (80007e8 <LL_RCC_SetAPB1Prescaler+0x28>)
 80007ce:	4013      	ands	r3, r2
 80007d0:	0019      	movs	r1, r3
 80007d2:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	430a      	orrs	r2, r1
 80007d8:	609a      	str	r2, [r3, #8]
}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	46bd      	mov	sp, r7
 80007de:	b002      	add	sp, #8
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	40021000 	.word	0x40021000
 80007e8:	ffff8fff 	.word	0xffff8fff

080007ec <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80007f0:	4b04      	ldr	r3, [pc, #16]	; (8000804 <LL_RCC_PLL_Enable+0x18>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	4b03      	ldr	r3, [pc, #12]	; (8000804 <LL_RCC_PLL_Enable+0x18>)
 80007f6:	2180      	movs	r1, #128	; 0x80
 80007f8:	0449      	lsls	r1, r1, #17
 80007fa:	430a      	orrs	r2, r1
 80007fc:	601a      	str	r2, [r3, #0]
}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40021000 	.word	0x40021000

08000808 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800080c:	4b07      	ldr	r3, [pc, #28]	; (800082c <LL_RCC_PLL_IsReady+0x24>)
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	2380      	movs	r3, #128	; 0x80
 8000812:	049b      	lsls	r3, r3, #18
 8000814:	401a      	ands	r2, r3
 8000816:	2380      	movs	r3, #128	; 0x80
 8000818:	049b      	lsls	r3, r3, #18
 800081a:	429a      	cmp	r2, r3
 800081c:	d101      	bne.n	8000822 <LL_RCC_PLL_IsReady+0x1a>
 800081e:	2301      	movs	r3, #1
 8000820:	e000      	b.n	8000824 <LL_RCC_PLL_IsReady+0x1c>
 8000822:	2300      	movs	r3, #0
}
 8000824:	0018      	movs	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	40021000 	.word	0x40021000

08000830 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	607a      	str	r2, [r7, #4]
 800083c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800083e:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000840:	68db      	ldr	r3, [r3, #12]
 8000842:	4a0a      	ldr	r2, [pc, #40]	; (800086c <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000844:	4013      	ands	r3, r2
 8000846:	0019      	movs	r1, r3
 8000848:	68fa      	ldr	r2, [r7, #12]
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	431a      	orrs	r2, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	431a      	orrs	r2, r3
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	431a      	orrs	r2, r3
 8000858:	4b03      	ldr	r3, [pc, #12]	; (8000868 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800085a:	430a      	orrs	r2, r1
 800085c:	60da      	str	r2, [r3, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	b004      	add	sp, #16
 8000864:	bd80      	pop	{r7, pc}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	40021000 	.word	0x40021000
 800086c:	1fff808c 	.word	0x1fff808c

08000870 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000874:	4b04      	ldr	r3, [pc, #16]	; (8000888 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 8000876:	68da      	ldr	r2, [r3, #12]
 8000878:	4b03      	ldr	r3, [pc, #12]	; (8000888 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 800087a:	2180      	movs	r1, #128	; 0x80
 800087c:	0549      	lsls	r1, r1, #21
 800087e:	430a      	orrs	r2, r1
 8000880:	60da      	str	r2, [r3, #12]
}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40021000 	.word	0x40021000

0800088c <LL_APB1_GRP1_EnableClock>:
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <LL_APB1_GRP1_EnableClock+0x28>)
 8000896:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <LL_APB1_GRP1_EnableClock+0x28>)
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	430a      	orrs	r2, r1
 800089e:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80008a0:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <LL_APB1_GRP1_EnableClock+0x28>)
 80008a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	4013      	ands	r3, r2
 80008a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008aa:	68fb      	ldr	r3, [r7, #12]
}
 80008ac:	46c0      	nop			; (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	b004      	add	sp, #16
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40021000 	.word	0x40021000

080008b8 <LL_APB2_GRP1_EnableClock>:
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <LL_APB2_GRP1_EnableClock+0x28>)
 80008c2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <LL_APB2_GRP1_EnableClock+0x28>)
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	430a      	orrs	r2, r1
 80008ca:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 80008cc:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <LL_APB2_GRP1_EnableClock+0x28>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	4013      	ands	r3, r2
 80008d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008d6:	68fb      	ldr	r3, [r7, #12]
}
 80008d8:	46c0      	nop			; (mov r8, r8)
 80008da:	46bd      	mov	sp, r7
 80008dc:	b004      	add	sp, #16
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40021000 	.word	0x40021000

080008e4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <LL_FLASH_SetLatency+0x24>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2207      	movs	r2, #7
 80008f2:	4393      	bics	r3, r2
 80008f4:	0019      	movs	r1, r3
 80008f6:	4b04      	ldr	r3, [pc, #16]	; (8000908 <LL_FLASH_SetLatency+0x24>)
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	430a      	orrs	r2, r1
 80008fc:	601a      	str	r2, [r3, #0]
}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	b002      	add	sp, #8
 8000904:	bd80      	pop	{r7, pc}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	40022000 	.word	0x40022000

0800090c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000910:	4b03      	ldr	r3, [pc, #12]	; (8000920 <LL_FLASH_GetLatency+0x14>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2207      	movs	r2, #7
 8000916:	4013      	ands	r3, r2
}
 8000918:	0018      	movs	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	40022000 	.word	0x40022000

08000924 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	69db      	ldr	r3, [r3, #28]
 8000930:	2240      	movs	r2, #64	; 0x40
 8000932:	4013      	ands	r3, r2
 8000934:	2b40      	cmp	r3, #64	; 0x40
 8000936:	d101      	bne.n	800093c <LL_USART_IsActiveFlag_TC+0x18>
 8000938:	2301      	movs	r3, #1
 800093a:	e000      	b.n	800093e <LL_USART_IsActiveFlag_TC+0x1a>
 800093c:	2300      	movs	r3, #0
}
 800093e:	0018      	movs	r0, r3
 8000940:	46bd      	mov	sp, r7
 8000942:	b002      	add	sp, #8
 8000944:	bd80      	pop	{r7, pc}

08000946 <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(const USART_TypeDef *USARTx)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	2280      	movs	r2, #128	; 0x80
 8000954:	4013      	ands	r3, r2
 8000956:	2b80      	cmp	r3, #128	; 0x80
 8000958:	d101      	bne.n	800095e <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 800095a:	2301      	movs	r3, #1
 800095c:	e000      	b.n	8000960 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 800095e:	2300      	movs	r3, #0
}
 8000960:	0018      	movs	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	b002      	add	sp, #8
 8000966:	bd80      	pop	{r7, pc}

08000968 <LL_USART_ClearFlag_TC>:
  * @rmtoll ICR          TCCF          LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2240      	movs	r2, #64	; 0x40
 8000974:	621a      	str	r2, [r3, #32]
}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	46bd      	mov	sp, r7
 800097a:	b002      	add	sp, #8
 800097c:	bd80      	pop	{r7, pc}

0800097e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b082      	sub	sp, #8
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
 8000986:	000a      	movs	r2, r1
 8000988:	1cfb      	adds	r3, r7, #3
 800098a:	701a      	strb	r2, [r3, #0]
  USARTx->TDR = Value;
 800098c:	1cfb      	adds	r3, r7, #3
 800098e:	781a      	ldrb	r2, [r3, #0]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	b002      	add	sp, #8
 800099a:	bd80      	pop	{r7, pc}

0800099c <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	683a      	ldr	r2, [r7, #0]
 80009b0:	4013      	ands	r3, r2
 80009b2:	041a      	lsls	r2, r3, #16
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	43db      	mvns	r3, r3
 80009b8:	6839      	ldr	r1, [r7, #0]
 80009ba:	400b      	ands	r3, r1
 80009bc:	431a      	orrs	r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	619a      	str	r2, [r3, #24]
}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	46bd      	mov	sp, r7
 80009c6:	b004      	add	sp, #16
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
	  /* Wait for TXE flag to be raised */
  while (!LL_USART_IsActiveFlag_TXE(USART1));
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <__io_putchar+0x44>)
 80009d8:	0018      	movs	r0, r3
 80009da:	f7ff ffb4 	bl	8000946 <LL_USART_IsActiveFlag_TXE_TXFNF>
 80009de:	1e03      	subs	r3, r0, #0
 80009e0:	d0f9      	beq.n	80009d6 <__io_putchar+0xa>

  /* Write character in Transmit Data register.
  TXE flag is cleared by writing data in TDR register */
  LL_USART_TransmitData8(USART1, (uint8_t)ch);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <__io_putchar+0x44>)
 80009e8:	0019      	movs	r1, r3
 80009ea:	0010      	movs	r0, r2
 80009ec:	f7ff ffc7 	bl	800097e <LL_USART_TransmitData8>
  LL_USART_ClearFlag_TC(USART1);
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <__io_putchar+0x44>)
 80009f2:	0018      	movs	r0, r3
 80009f4:	f7ff ffb8 	bl	8000968 <LL_USART_ClearFlag_TC>

  /* Wait for TC flag to be raised for last char */
  while (!LL_USART_IsActiveFlag_TC(USART1));
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <__io_putchar+0x44>)
 80009fc:	0018      	movs	r0, r3
 80009fe:	f7ff ff91 	bl	8000924 <LL_USART_IsActiveFlag_TC>
 8000a02:	1e03      	subs	r3, r0, #0
 8000a04:	d0f9      	beq.n	80009fa <__io_putchar+0x2e>

  return ch;
 8000a06:	687b      	ldr	r3, [r7, #4]
}
 8000a08:	0018      	movs	r0, r3
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	b002      	add	sp, #8
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40013800 	.word	0x40013800

08000a14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000a18:	2001      	movs	r0, #1
 8000a1a:	f7ff ff4d 	bl	80008b8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000a1e:	2380      	movs	r3, #128	; 0x80
 8000a20:	055b      	lsls	r3, r3, #21
 8000a22:	0018      	movs	r0, r3
 8000a24:	f7ff ff32 	bl	800088c <LL_APB1_GRP1_EnableClock>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, 3);
 8000a28:	2301      	movs	r3, #1
 8000a2a:	425b      	negs	r3, r3
 8000a2c:	2103      	movs	r1, #3
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f7ff fe00 	bl	8000634 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a34:	f000 f81a 	bl	8000a6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a38:	f7ff fca0 	bl	800037c <MX_GPIO_Init>
  MX_CRC_Init();
 8000a3c:	f7ff fc52 	bl	80002e4 <MX_CRC_Init>
  MX_I2C2_Init();
 8000a40:	f7ff fd70 	bl	8000524 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000a44:	f000 f9f4 	bl	8000e30 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	LL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000a48:	23a0      	movs	r3, #160	; 0xa0
 8000a4a:	05db      	lsls	r3, r3, #23
 8000a4c:	2110      	movs	r1, #16
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f7ff ffa4 	bl	800099c <LL_GPIO_TogglePin>
	LL_mDelay(1000);
 8000a54:	23fa      	movs	r3, #250	; 0xfa
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f000 ff71 	bl	8001940 <LL_mDelay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	printf("Hello from STM32G031 !!! \r\n");
 8000a5e:	4b02      	ldr	r3, [pc, #8]	; (8000a68 <main+0x54>)
 8000a60:	0018      	movs	r0, r3
 8000a62:	f001 f8b9 	bl	8001bd8 <puts>
	LL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000a66:	e7ef      	b.n	8000a48 <main+0x34>
 8000a68:	08002390 	.word	0x08002390

08000a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000a70:	2002      	movs	r0, #2
 8000a72:	f7ff ff37 	bl	80008e4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	f7ff ff48 	bl	800090c <LL_FLASH_GetLatency>
 8000a7c:	0003      	movs	r3, r0
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d1fa      	bne.n	8000a78 <SystemClock_Config+0xc>
  {
  }

  /* HSI configuration and activation */
  LL_RCC_HSI_Enable();
 8000a82:	f7ff fe45 	bl	8000710 <LL_RCC_HSI_Enable>
  while(LL_RCC_HSI_IsReady() != 1)
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	f7ff fe50 	bl	800072c <LL_RCC_HSI_IsReady>
 8000a8c:	0003      	movs	r3, r0
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d1fa      	bne.n	8000a88 <SystemClock_Config+0x1c>
  {
  }

  /* Main PLL configuration and activation */
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 8000a92:	2380      	movs	r3, #128	; 0x80
 8000a94:	059b      	lsls	r3, r3, #22
 8000a96:	2208      	movs	r2, #8
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2002      	movs	r0, #2
 8000a9c:	f7ff fec8 	bl	8000830 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000aa0:	f7ff fea4 	bl	80007ec <LL_RCC_PLL_Enable>
  LL_RCC_PLL_EnableDomain_SYS();
 8000aa4:	f7ff fee4 	bl	8000870 <LL_RCC_PLL_EnableDomain_SYS>
  while(LL_RCC_PLL_IsReady() != 1)
 8000aa8:	46c0      	nop			; (mov r8, r8)
 8000aaa:	f7ff fead 	bl	8000808 <LL_RCC_PLL_IsReady>
 8000aae:	0003      	movs	r3, r0
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d1fa      	bne.n	8000aaa <SystemClock_Config+0x3e>
  {
  }

  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f7ff fe6d 	bl	8000794 <LL_RCC_SetAHBPrescaler>

  /* Sysclk activation on the main PLL */
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000aba:	2002      	movs	r0, #2
 8000abc:	f7ff fe4a 	bl	8000754 <LL_RCC_SetSysClkSource>
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000ac0:	46c0      	nop			; (mov r8, r8)
 8000ac2:	f7ff fe5b 	bl	800077c <LL_RCC_GetSysClkSource>
 8000ac6:	0003      	movs	r3, r0
 8000ac8:	2b10      	cmp	r3, #16
 8000aca:	d1fa      	bne.n	8000ac2 <SystemClock_Config+0x56>
  {
  }

  /* Set APB1 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000acc:	2000      	movs	r0, #0
 8000ace:	f7ff fe77 	bl	80007c0 <LL_RCC_SetAPB1Prescaler>

  LL_Init1msTick(64000000);
 8000ad2:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <SystemClock_Config+0x7c>)
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f000 ff23 	bl	8001920 <LL_Init1msTick>

  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(64000000);
 8000ada:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <SystemClock_Config+0x7c>)
 8000adc:	0018      	movs	r0, r3
 8000ade:	f000 ff53 	bl	8001988 <LL_SetSystemCoreClock>
}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	03d09000 	.word	0x03d09000

08000aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000af0:	e7fe      	b.n	8000af0 <NMI_Handler+0x4>

08000af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <HardFault_Handler+0x4>

08000af8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000afc:	46c0      	nop			; (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b10:	46c0      	nop			; (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b086      	sub	sp, #24
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	60f8      	str	r0, [r7, #12]
 8000b1e:	60b9      	str	r1, [r7, #8]
 8000b20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
 8000b26:	e00a      	b.n	8000b3e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b28:	e000      	b.n	8000b2c <_read+0x16>
 8000b2a:	bf00      	nop
 8000b2c:	0001      	movs	r1, r0
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	1c5a      	adds	r2, r3, #1
 8000b32:	60ba      	str	r2, [r7, #8]
 8000b34:	b2ca      	uxtb	r2, r1
 8000b36:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	617b      	str	r3, [r7, #20]
 8000b3e:	697a      	ldr	r2, [r7, #20]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	dbf0      	blt.n	8000b28 <_read+0x12>
  }

  return len;
 8000b46:	687b      	ldr	r3, [r7, #4]
}
 8000b48:	0018      	movs	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b006      	add	sp, #24
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	e009      	b.n	8000b76 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	1c5a      	adds	r2, r3, #1
 8000b66:	60ba      	str	r2, [r7, #8]
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f7ff ff2e 	bl	80009cc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	3301      	adds	r3, #1
 8000b74:	617b      	str	r3, [r7, #20]
 8000b76:	697a      	ldr	r2, [r7, #20]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	dbf1      	blt.n	8000b62 <_write+0x12>
  }
  return len;
 8000b7e:	687b      	ldr	r3, [r7, #4]
}
 8000b80:	0018      	movs	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	b006      	add	sp, #24
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <_close>:

int _close(int file)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b90:	2301      	movs	r3, #1
 8000b92:	425b      	negs	r3, r3
}
 8000b94:	0018      	movs	r0, r3
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b002      	add	sp, #8
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	2280      	movs	r2, #128	; 0x80
 8000baa:	0192      	lsls	r2, r2, #6
 8000bac:	605a      	str	r2, [r3, #4]
  return 0;
 8000bae:	2300      	movs	r3, #0
}
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b002      	add	sp, #8
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <_isatty>:

int _isatty(int file)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bc0:	2301      	movs	r3, #1
}
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b002      	add	sp, #8
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b084      	sub	sp, #16
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	60f8      	str	r0, [r7, #12]
 8000bd2:	60b9      	str	r1, [r7, #8]
 8000bd4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bd6:	2300      	movs	r3, #0
}
 8000bd8:	0018      	movs	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b004      	add	sp, #16
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be8:	4a14      	ldr	r2, [pc, #80]	; (8000c3c <_sbrk+0x5c>)
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <_sbrk+0x60>)
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf4:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <_sbrk+0x64>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d102      	bne.n	8000c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <_sbrk+0x64>)
 8000bfe:	4a12      	ldr	r2, [pc, #72]	; (8000c48 <_sbrk+0x68>)
 8000c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <_sbrk+0x64>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	18d3      	adds	r3, r2, r3
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d207      	bcs.n	8000c20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c10:	f001 f934 	bl	8001e7c <__errno>
 8000c14:	0003      	movs	r3, r0
 8000c16:	220c      	movs	r2, #12
 8000c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	425b      	negs	r3, r3
 8000c1e:	e009      	b.n	8000c34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <_sbrk+0x64>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c26:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <_sbrk+0x64>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	18d2      	adds	r2, r2, r3
 8000c2e:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <_sbrk+0x64>)
 8000c30:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c32:	68fb      	ldr	r3, [r7, #12]
}
 8000c34:	0018      	movs	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b006      	add	sp, #24
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20002000 	.word	0x20002000
 8000c40:	00000400 	.word	0x00000400
 8000c44:	2000007c 	.word	0x2000007c
 8000c48:	200001d0 	.word	0x200001d0

08000c4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c50:	46c0      	nop			; (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <LL_RCC_SetUSARTClockSource>:
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <LL_RCC_SetUSARTClockSource+0x2c>)
 8000c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	0c12      	lsrs	r2, r2, #16
 8000c68:	43d2      	mvns	r2, r2
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	0011      	movs	r1, r2
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	041b      	lsls	r3, r3, #16
 8000c72:	0c1a      	lsrs	r2, r3, #16
 8000c74:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <LL_RCC_SetUSARTClockSource+0x2c>)
 8000c76:	430a      	orrs	r2, r1
 8000c78:	655a      	str	r2, [r3, #84]	; 0x54
}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b002      	add	sp, #8
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	40021000 	.word	0x40021000

08000c88 <LL_APB2_GRP1_EnableClock>:
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 8000c90:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <LL_APB2_GRP1_EnableClock+0x28>)
 8000c92:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <LL_APB2_GRP1_EnableClock+0x28>)
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <LL_APB2_GRP1_EnableClock+0x28>)
 8000c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
}
 8000ca8:	46c0      	nop			; (mov r8, r8)
 8000caa:	46bd      	mov	sp, r7
 8000cac:	b004      	add	sp, #16
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40021000 	.word	0x40021000

08000cb4 <LL_IOP_GRP1_EnableClock>:
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8000cbc:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <LL_IOP_GRP1_EnableClock+0x28>)
 8000cbe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <LL_IOP_GRP1_EnableClock+0x28>)
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	430a      	orrs	r2, r1
 8000cc6:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000cc8:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <LL_IOP_GRP1_EnableClock+0x28>)
 8000cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
}
 8000cd4:	46c0      	nop			; (mov r8, r8)
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	b004      	add	sp, #16
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <LL_USART_Enable>:
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2201      	movs	r2, #1
 8000cee:	431a      	orrs	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	601a      	str	r2, [r3, #0]
}
 8000cf4:	46c0      	nop			; (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	b002      	add	sp, #8
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <LL_USART_DisableFIFO>:
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a03      	ldr	r2, [pc, #12]	; (8000d18 <LL_USART_DisableFIFO+0x1c>)
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	601a      	str	r2, [r3, #0]
}
 8000d10:	46c0      	nop			; (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	b002      	add	sp, #8
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	dfffffff 	.word	0xdfffffff

08000d1c <LL_USART_SetTXFIFOThreshold>:
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d26:	f3ef 8310 	mrs	r3, PRIMASK
 8000d2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8000d2c:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8000d2e:	617b      	str	r3, [r7, #20]
 8000d30:	2301      	movs	r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f383 8810 	msr	PRIMASK, r3
}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	08da      	lsrs	r2, r3, #3
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	075b      	lsls	r3, r3, #29
 8000d48:	431a      	orrs	r2, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	f383 8810 	msr	PRIMASK, r3
}
 8000d58:	46c0      	nop			; (mov r8, r8)
}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b006      	add	sp, #24
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <LL_USART_SetRXFIFOThreshold>:
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d6e:	f3ef 8310 	mrs	r3, PRIMASK
 8000d72:	60bb      	str	r3, [r7, #8]
  return(result);
 8000d74:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	2301      	movs	r3, #1
 8000d7a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	f383 8810 	msr	PRIMASK, r3
}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	4a08      	ldr	r2, [pc, #32]	; (8000dac <LL_USART_SetRXFIFOThreshold+0x48>)
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	065b      	lsls	r3, r3, #25
 8000d90:	431a      	orrs	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	f383 8810 	msr	PRIMASK, r3
}
 8000da0:	46c0      	nop			; (mov r8, r8)
}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b006      	add	sp, #24
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	f1ffffff 	.word	0xf1ffffff

08000db0 <LL_USART_ConfigAsyncMode>:
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <LL_USART_ConfigAsyncMode+0x2c>)
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	222a      	movs	r2, #42	; 0x2a
 8000dca:	4393      	bics	r3, r2
 8000dcc:	001a      	movs	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b002      	add	sp, #8
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	ffffb7ff 	.word	0xffffb7ff

08000de0 <LL_USART_IsActiveFlag_TEACK>:
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	69da      	ldr	r2, [r3, #28]
 8000dec:	2380      	movs	r3, #128	; 0x80
 8000dee:	039b      	lsls	r3, r3, #14
 8000df0:	401a      	ands	r2, r3
 8000df2:	2380      	movs	r3, #128	; 0x80
 8000df4:	039b      	lsls	r3, r3, #14
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d101      	bne.n	8000dfe <LL_USART_IsActiveFlag_TEACK+0x1e>
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e000      	b.n	8000e00 <LL_USART_IsActiveFlag_TEACK+0x20>
 8000dfe:	2300      	movs	r3, #0
}
 8000e00:	0018      	movs	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	b002      	add	sp, #8
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <LL_USART_IsActiveFlag_REACK>:
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	69da      	ldr	r2, [r3, #28]
 8000e14:	2380      	movs	r3, #128	; 0x80
 8000e16:	03db      	lsls	r3, r3, #15
 8000e18:	401a      	ands	r2, r3
 8000e1a:	2380      	movs	r3, #128	; 0x80
 8000e1c:	03db      	lsls	r3, r3, #15
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d101      	bne.n	8000e26 <LL_USART_IsActiveFlag_REACK+0x1e>
 8000e22:	2301      	movs	r3, #1
 8000e24:	e000      	b.n	8000e28 <LL_USART_IsActiveFlag_REACK+0x20>
 8000e26:	2300      	movs	r3, #0
}
 8000e28:	0018      	movs	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	b002      	add	sp, #8
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e30:	b590      	push	{r4, r7, lr}
 8000e32:	b08f      	sub	sp, #60	; 0x3c
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000e36:	2418      	movs	r4, #24
 8000e38:	193b      	adds	r3, r7, r4
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	2320      	movs	r3, #32
 8000e3e:	001a      	movs	r2, r3
 8000e40:	2100      	movs	r1, #0
 8000e42:	f000 ffc5 	bl	8001dd0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e46:	003b      	movs	r3, r7
 8000e48:	0018      	movs	r0, r3
 8000e4a:	2318      	movs	r3, #24
 8000e4c:	001a      	movs	r2, r3
 8000e4e:	2100      	movs	r1, #0
 8000e50:	f000 ffbe 	bl	8001dd0 <memset>

  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK1);
 8000e54:	23c0      	movs	r3, #192	; 0xc0
 8000e56:	029b      	lsls	r3, r3, #10
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f7ff fefd 	bl	8000c58 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000e5e:	2380      	movs	r3, #128	; 0x80
 8000e60:	01db      	lsls	r3, r3, #7
 8000e62:	0018      	movs	r0, r3
 8000e64:	f7ff ff10 	bl	8000c88 <LL_APB2_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000e68:	2002      	movs	r0, #2
 8000e6a:	f7ff ff23 	bl	8000cb4 <LL_IOP_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PB7   ------> USART1_RX
  PB6   ------> USART1_TX
  */
  GPIO_InitStruct.Pin = RS_RX_Pin;
 8000e6e:	003b      	movs	r3, r7
 8000e70:	2280      	movs	r2, #128	; 0x80
 8000e72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e74:	003b      	movs	r3, r7
 8000e76:	2202      	movs	r2, #2
 8000e78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e7a:	003b      	movs	r3, r7
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e80:	003b      	movs	r3, r7
 8000e82:	2200      	movs	r2, #0
 8000e84:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e86:	003b      	movs	r3, r7
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8000e8c:	003b      	movs	r3, r7
 8000e8e:	2200      	movs	r2, #0
 8000e90:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(RS_RX_GPIO_Port, &GPIO_InitStruct);
 8000e92:	003b      	movs	r3, r7
 8000e94:	4a32      	ldr	r2, [pc, #200]	; (8000f60 <MX_USART1_UART_Init+0x130>)
 8000e96:	0019      	movs	r1, r3
 8000e98:	0010      	movs	r0, r2
 8000e9a:	f000 f947 	bl	800112c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = RS_TX_Pin;
 8000e9e:	003b      	movs	r3, r7
 8000ea0:	2240      	movs	r2, #64	; 0x40
 8000ea2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ea4:	003b      	movs	r3, r7
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000eaa:	003b      	movs	r3, r7
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000eb0:	003b      	movs	r3, r7
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000eb6:	003b      	movs	r3, r7
 8000eb8:	2200      	movs	r2, #0
 8000eba:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8000ebc:	003b      	movs	r3, r7
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(RS_TX_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	003b      	movs	r3, r7
 8000ec4:	4a26      	ldr	r2, [pc, #152]	; (8000f60 <MX_USART1_UART_Init+0x130>)
 8000ec6:	0019      	movs	r1, r3
 8000ec8:	0010      	movs	r0, r2
 8000eca:	f000 f92f 	bl	800112c <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000ece:	193b      	adds	r3, r7, r4
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 115200;
 8000ed4:	193b      	adds	r3, r7, r4
 8000ed6:	22e1      	movs	r2, #225	; 0xe1
 8000ed8:	0252      	lsls	r2, r2, #9
 8000eda:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000edc:	0021      	movs	r1, r4
 8000ede:	187b      	adds	r3, r7, r1
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000ee4:	187b      	adds	r3, r7, r1
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000eea:	187b      	adds	r3, r7, r1
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000ef0:	187b      	adds	r3, r7, r1
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000ef6:	187b      	adds	r3, r7, r1
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000efc:	187b      	adds	r3, r7, r1
 8000efe:	2200      	movs	r2, #0
 8000f00:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART1, &USART_InitStruct);
 8000f02:	187b      	adds	r3, r7, r1
 8000f04:	4a17      	ldr	r2, [pc, #92]	; (8000f64 <MX_USART1_UART_Init+0x134>)
 8000f06:	0019      	movs	r1, r3
 8000f08:	0010      	movs	r0, r2
 8000f0a:	f000 fc7d 	bl	8001808 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <MX_USART1_UART_Init+0x134>)
 8000f10:	2100      	movs	r1, #0
 8000f12:	0018      	movs	r0, r3
 8000f14:	f7ff ff02 	bl	8000d1c <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <MX_USART1_UART_Init+0x134>)
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f7ff ff21 	bl	8000d64 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART1);
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <MX_USART1_UART_Init+0x134>)
 8000f24:	0018      	movs	r0, r3
 8000f26:	f7ff fee9 	bl	8000cfc <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART1);
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <MX_USART1_UART_Init+0x134>)
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f7ff ff3f 	bl	8000db0 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART1 */

  /* USER CODE END WKUPType USART1 */

  LL_USART_Enable(USART1);
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_USART1_UART_Init+0x134>)
 8000f34:	0018      	movs	r0, r3
 8000f36:	f7ff fed3 	bl	8000ce0 <LL_USART_Enable>

  /* Polling USART1 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART1))) || (!(LL_USART_IsActiveFlag_REACK(USART1))))
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_USART1_UART_Init+0x134>)
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f7ff ff4e 	bl	8000de0 <LL_USART_IsActiveFlag_TEACK>
 8000f44:	1e03      	subs	r3, r0, #0
 8000f46:	d0f9      	beq.n	8000f3c <MX_USART1_UART_Init+0x10c>
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_USART1_UART_Init+0x134>)
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f7ff ff5c 	bl	8000e08 <LL_USART_IsActiveFlag_REACK>
 8000f50:	1e03      	subs	r3, r0, #0
 8000f52:	d0f3      	beq.n	8000f3c <MX_USART1_UART_Init+0x10c>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f54:	46c0      	nop			; (mov r8, r8)
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b00f      	add	sp, #60	; 0x3c
 8000f5c:	bd90      	pop	{r4, r7, pc}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	50000400 	.word	0x50000400
 8000f64:	40013800 	.word	0x40013800

08000f68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f68:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f6a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f6c:	f7ff fe6e 	bl	8000c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f70:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f72:	490d      	ldr	r1, [pc, #52]	; (8000fa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f74:	4a0d      	ldr	r2, [pc, #52]	; (8000fac <LoopForever+0xe>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f78:	e002      	b.n	8000f80 <LoopCopyDataInit>

08000f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7e:	3304      	adds	r3, #4

08000f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f84:	d3f9      	bcc.n	8000f7a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f86:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f88:	4c0a      	ldr	r4, [pc, #40]	; (8000fb4 <LoopForever+0x16>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f8c:	e001      	b.n	8000f92 <LoopFillZerobss>

08000f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f90:	3204      	adds	r2, #4

08000f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f94:	d3fb      	bcc.n	8000f8e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f96:	f000 ff77 	bl	8001e88 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f9a:	f7ff fd3b 	bl	8000a14 <main>

08000f9e <LoopForever>:

LoopForever:
  b LoopForever
 8000f9e:	e7fe      	b.n	8000f9e <LoopForever>
  ldr   r0, =_estack
 8000fa0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000fac:	08002444 	.word	0x08002444
  ldr r2, =_sbss
 8000fb0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000fb4:	200001cc 	.word	0x200001cc

08000fb8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb8:	e7fe      	b.n	8000fb8 <ADC1_IRQHandler>

08000fba <LL_GPIO_SetPinMode>:
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b084      	sub	sp, #16
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	60f8      	str	r0, [r7, #12]
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	6819      	ldr	r1, [r3, #0]
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	435b      	muls	r3, r3
 8000fce:	001a      	movs	r2, r3
 8000fd0:	0013      	movs	r3, r2
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	189b      	adds	r3, r3, r2
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	400b      	ands	r3, r1
 8000fda:	001a      	movs	r2, r3
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	435b      	muls	r3, r3
 8000fe0:	6879      	ldr	r1, [r7, #4]
 8000fe2:	434b      	muls	r3, r1
 8000fe4:	431a      	orrs	r2, r3
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	601a      	str	r2, [r3, #0]
}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	46bd      	mov	sp, r7
 8000fee:	b004      	add	sp, #16
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <LL_GPIO_SetPinOutputType>:
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b084      	sub	sp, #16
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	60f8      	str	r0, [r7, #12]
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	43d2      	mvns	r2, r2
 8001006:	401a      	ands	r2, r3
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	434b      	muls	r3, r1
 800100e:	431a      	orrs	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	605a      	str	r2, [r3, #4]
}
 8001014:	46c0      	nop			; (mov r8, r8)
 8001016:	46bd      	mov	sp, r7
 8001018:	b004      	add	sp, #16
 800101a:	bd80      	pop	{r7, pc}

0800101c <LL_GPIO_SetPinSpeed>:
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	6899      	ldr	r1, [r3, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	435b      	muls	r3, r3
 8001030:	001a      	movs	r2, r3
 8001032:	0013      	movs	r3, r2
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	189b      	adds	r3, r3, r2
 8001038:	43db      	mvns	r3, r3
 800103a:	400b      	ands	r3, r1
 800103c:	001a      	movs	r2, r3
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	435b      	muls	r3, r3
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	434b      	muls	r3, r1
 8001046:	431a      	orrs	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	609a      	str	r2, [r3, #8]
}
 800104c:	46c0      	nop			; (mov r8, r8)
 800104e:	46bd      	mov	sp, r7
 8001050:	b004      	add	sp, #16
 8001052:	bd80      	pop	{r7, pc}

08001054 <LL_GPIO_SetPinPull>:
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	68d9      	ldr	r1, [r3, #12]
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	435b      	muls	r3, r3
 8001068:	001a      	movs	r2, r3
 800106a:	0013      	movs	r3, r2
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	189b      	adds	r3, r3, r2
 8001070:	43db      	mvns	r3, r3
 8001072:	400b      	ands	r3, r1
 8001074:	001a      	movs	r2, r3
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	435b      	muls	r3, r3
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	434b      	muls	r3, r1
 800107e:	431a      	orrs	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	60da      	str	r2, [r3, #12]
}
 8001084:	46c0      	nop			; (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	b004      	add	sp, #16
 800108a:	bd80      	pop	{r7, pc}

0800108c <LL_GPIO_SetAFPin_0_7>:
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	6a19      	ldr	r1, [r3, #32]
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	435b      	muls	r3, r3
 80010a0:	68ba      	ldr	r2, [r7, #8]
 80010a2:	4353      	muls	r3, r2
 80010a4:	68ba      	ldr	r2, [r7, #8]
 80010a6:	435a      	muls	r2, r3
 80010a8:	0013      	movs	r3, r2
 80010aa:	011b      	lsls	r3, r3, #4
 80010ac:	1a9b      	subs	r3, r3, r2
 80010ae:	43db      	mvns	r3, r3
 80010b0:	400b      	ands	r3, r1
 80010b2:	001a      	movs	r2, r3
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	435b      	muls	r3, r3
 80010b8:	68b9      	ldr	r1, [r7, #8]
 80010ba:	434b      	muls	r3, r1
 80010bc:	68b9      	ldr	r1, [r7, #8]
 80010be:	434b      	muls	r3, r1
 80010c0:	6879      	ldr	r1, [r7, #4]
 80010c2:	434b      	muls	r3, r1
 80010c4:	431a      	orrs	r2, r3
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	621a      	str	r2, [r3, #32]
}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b004      	add	sp, #16
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <LL_GPIO_SetAFPin_8_15>:
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b084      	sub	sp, #16
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	60f8      	str	r0, [r7, #12]
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	0a12      	lsrs	r2, r2, #8
 80010ea:	4353      	muls	r3, r2
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	0a12      	lsrs	r2, r2, #8
 80010f0:	4353      	muls	r3, r2
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	0a12      	lsrs	r2, r2, #8
 80010f6:	435a      	muls	r2, r3
 80010f8:	0013      	movs	r3, r2
 80010fa:	011b      	lsls	r3, r3, #4
 80010fc:	1a9b      	subs	r3, r3, r2
 80010fe:	43db      	mvns	r3, r3
 8001100:	400b      	ands	r3, r1
 8001102:	001a      	movs	r2, r3
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	0a1b      	lsrs	r3, r3, #8
 8001108:	68b9      	ldr	r1, [r7, #8]
 800110a:	0a09      	lsrs	r1, r1, #8
 800110c:	434b      	muls	r3, r1
 800110e:	68b9      	ldr	r1, [r7, #8]
 8001110:	0a09      	lsrs	r1, r1, #8
 8001112:	434b      	muls	r3, r1
 8001114:	68b9      	ldr	r1, [r7, #8]
 8001116:	0a09      	lsrs	r1, r1, #8
 8001118:	434b      	muls	r3, r1
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	434b      	muls	r3, r1
 800111e:	431a      	orrs	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001124:	46c0      	nop			; (mov r8, r8)
 8001126:	46bd      	mov	sp, r7
 8001128:	b004      	add	sp, #16
 800112a:	bd80      	pop	{r7, pc}

0800112c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800113a:	e047      	b.n	80011cc <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2101      	movs	r1, #1
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	4091      	lsls	r1, r2
 8001146:	000a      	movs	r2, r1
 8001148:	4013      	ands	r3, r2
 800114a:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d039      	beq.n	80011c6 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d003      	beq.n	8001162 <LL_GPIO_Init+0x36>
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b02      	cmp	r3, #2
 8001160:	d10d      	bne.n	800117e <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	689a      	ldr	r2, [r3, #8]
 8001166:	68b9      	ldr	r1, [r7, #8]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	0018      	movs	r0, r3
 800116c:	f7ff ff56 	bl	800101c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	68da      	ldr	r2, [r3, #12]
 8001174:	68b9      	ldr	r1, [r7, #8]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	0018      	movs	r0, r3
 800117a:	f7ff ff3a 	bl	8000ff2 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	691a      	ldr	r2, [r3, #16]
 8001182:	68b9      	ldr	r1, [r7, #8]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	0018      	movs	r0, r3
 8001188:	f7ff ff64 	bl	8001054 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	2b02      	cmp	r3, #2
 8001192:	d111      	bne.n	80011b8 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	2bff      	cmp	r3, #255	; 0xff
 8001198:	d807      	bhi.n	80011aa <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	695a      	ldr	r2, [r3, #20]
 800119e:	68b9      	ldr	r1, [r7, #8]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	0018      	movs	r0, r3
 80011a4:	f7ff ff72 	bl	800108c <LL_GPIO_SetAFPin_0_7>
 80011a8:	e006      	b.n	80011b8 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	695a      	ldr	r2, [r3, #20]
 80011ae:	68b9      	ldr	r1, [r7, #8]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	0018      	movs	r0, r3
 80011b4:	f7ff ff8d 	bl	80010d2 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	68b9      	ldr	r1, [r7, #8]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	0018      	movs	r0, r3
 80011c2:	f7ff fefa 	bl	8000fba <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	3301      	adds	r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	40da      	lsrs	r2, r3
 80011d4:	1e13      	subs	r3, r2, #0
 80011d6:	d1b1      	bne.n	800113c <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 80011d8:	2300      	movs	r3, #0
}
 80011da:	0018      	movs	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	b004      	add	sp, #16
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <LL_I2C_Enable>:
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2201      	movs	r2, #1
 80011f0:	431a      	orrs	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	601a      	str	r2, [r3, #0]
}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b002      	add	sp, #8
 80011fc:	bd80      	pop	{r7, pc}

080011fe <LL_I2C_Disable>:
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2201      	movs	r2, #1
 800120c:	4393      	bics	r3, r2
 800120e:	001a      	movs	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	601a      	str	r2, [r3, #0]
}
 8001214:	46c0      	nop			; (mov r8, r8)
 8001216:	46bd      	mov	sp, r7
 8001218:	b002      	add	sp, #8
 800121a:	bd80      	pop	{r7, pc}

0800121c <LL_I2C_ConfigFilters>:
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a06      	ldr	r2, [pc, #24]	; (8001248 <LL_I2C_ConfigFilters+0x2c>)
 800122e:	401a      	ands	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	0219      	lsls	r1, r3, #8
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	430b      	orrs	r3, r1
 8001238:	431a      	orrs	r2, r3
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	601a      	str	r2, [r3, #0]
}
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	46bd      	mov	sp, r7
 8001242:	b004      	add	sp, #16
 8001244:	bd80      	pop	{r7, pc}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	ffffe0ff 	.word	0xffffe0ff

0800124c <LL_I2C_SetOwnAddress1>:
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	0adb      	lsrs	r3, r3, #11
 800125e:	02da      	lsls	r2, r3, #11
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	430b      	orrs	r3, r1
 8001266:	431a      	orrs	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	609a      	str	r2, [r3, #8]
}
 800126c:	46c0      	nop			; (mov r8, r8)
 800126e:	46bd      	mov	sp, r7
 8001270:	b004      	add	sp, #16
 8001272:	bd80      	pop	{r7, pc}

08001274 <LL_I2C_EnableOwnAddress1>:
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	2280      	movs	r2, #128	; 0x80
 8001282:	0212      	lsls	r2, r2, #8
 8001284:	431a      	orrs	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	609a      	str	r2, [r3, #8]
}
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	46bd      	mov	sp, r7
 800128e:	b002      	add	sp, #8
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <LL_I2C_DisableOwnAddress1>:
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	4a03      	ldr	r2, [pc, #12]	; (80012b0 <LL_I2C_DisableOwnAddress1+0x1c>)
 80012a2:	401a      	ands	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	609a      	str	r2, [r3, #8]
}
 80012a8:	46c0      	nop			; (mov r8, r8)
 80012aa:	46bd      	mov	sp, r7
 80012ac:	b002      	add	sp, #8
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	ffff7fff 	.word	0xffff7fff

080012b4 <LL_I2C_SetTiming>:
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	611a      	str	r2, [r3, #16]
}
 80012c4:	46c0      	nop			; (mov r8, r8)
 80012c6:	46bd      	mov	sp, r7
 80012c8:	b002      	add	sp, #8
 80012ca:	bd80      	pop	{r7, pc}

080012cc <LL_I2C_SetMode>:
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a05      	ldr	r2, [pc, #20]	; (80012f0 <LL_I2C_SetMode+0x24>)
 80012dc:	401a      	ands	r2, r3
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	431a      	orrs	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	601a      	str	r2, [r3, #0]
}
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	46bd      	mov	sp, r7
 80012ea:	b002      	add	sp, #8
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	ffcfffff 	.word	0xffcfffff

080012f4 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	4a05      	ldr	r2, [pc, #20]	; (8001318 <LL_I2C_AcknowledgeNextData+0x24>)
 8001304:	401a      	ands	r2, r3
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	431a      	orrs	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	605a      	str	r2, [r3, #4]
}
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	46bd      	mov	sp, r7
 8001312:	b002      	add	sp, #8
 8001314:	bd80      	pop	{r7, pc}
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	ffff7fff 	.word	0xffff7fff

0800131c <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	0018      	movs	r0, r3
 800132a:	f7ff ff68 	bl	80011fe <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	6899      	ldr	r1, [r3, #8]
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	68da      	ldr	r2, [r3, #12]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	0018      	movs	r0, r3
 800133a:	f7ff ff6f 	bl	800121c <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	0011      	movs	r1, r2
 8001346:	0018      	movs	r0, r3
 8001348:	f7ff ffb4 	bl	80012b4 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	0018      	movs	r0, r3
 8001350:	f7ff ff47 	bl	80011e2 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	0018      	movs	r0, r3
 8001358:	f7ff ff9c 	bl	8001294 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	6919      	ldr	r1, [r3, #16]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	699a      	ldr	r2, [r3, #24]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	0018      	movs	r0, r3
 8001368:	f7ff ff70 	bl	800124c <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <LL_I2C_Init+0x60>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	0018      	movs	r0, r3
 8001378:	f7ff ff7c 	bl	8001274 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	0011      	movs	r1, r2
 8001384:	0018      	movs	r0, r3
 8001386:	f7ff ffa1 	bl	80012cc <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	695a      	ldr	r2, [r3, #20]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	0011      	movs	r1, r2
 8001392:	0018      	movs	r0, r3
 8001394:	f7ff ffae 	bl	80012f4 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8001398:	2300      	movs	r3, #0
}
 800139a:	0018      	movs	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	b002      	add	sp, #8
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <LL_RCC_HSI_IsReady>:
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80013a8:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <LL_RCC_HSI_IsReady+0x24>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	401a      	ands	r2, r3
 80013b2:	2380      	movs	r3, #128	; 0x80
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d101      	bne.n	80013be <LL_RCC_HSI_IsReady+0x1a>
 80013ba:	2301      	movs	r3, #1
 80013bc:	e000      	b.n	80013c0 <LL_RCC_HSI_IsReady+0x1c>
 80013be:	2300      	movs	r3, #0
}
 80013c0:	0018      	movs	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	40021000 	.word	0x40021000

080013cc <LL_RCC_LSE_IsReady>:
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <LL_RCC_LSE_IsReady+0x1c>)
 80013d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d4:	2202      	movs	r2, #2
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d101      	bne.n	80013e0 <LL_RCC_LSE_IsReady+0x14>
 80013dc:	2301      	movs	r3, #1
 80013de:	e000      	b.n	80013e2 <LL_RCC_LSE_IsReady+0x16>
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	0018      	movs	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40021000 	.word	0x40021000

080013ec <LL_RCC_GetSysClkSource>:
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <LL_RCC_GetSysClkSource+0x14>)
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	2238      	movs	r2, #56	; 0x38
 80013f6:	4013      	ands	r3, r2
}
 80013f8:	0018      	movs	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	40021000 	.word	0x40021000

08001404 <LL_RCC_GetAHBPrescaler>:
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001408:	4b03      	ldr	r3, [pc, #12]	; (8001418 <LL_RCC_GetAHBPrescaler+0x14>)
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	23f0      	movs	r3, #240	; 0xf0
 800140e:	011b      	lsls	r3, r3, #4
 8001410:	4013      	ands	r3, r2
}
 8001412:	0018      	movs	r0, r3
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40021000 	.word	0x40021000

0800141c <LL_RCC_GetAPB1Prescaler>:
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	23e0      	movs	r3, #224	; 0xe0
 8001426:	01db      	lsls	r3, r3, #7
 8001428:	4013      	ands	r3, r2
}
 800142a:	0018      	movs	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40021000 	.word	0x40021000

08001434 <LL_RCC_GetUSARTClockSource>:
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <LL_RCC_GetUSARTClockSource+0x20>)
 800143e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	401a      	ands	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	041b      	lsls	r3, r3, #16
 8001448:	4313      	orrs	r3, r2
}
 800144a:	0018      	movs	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	b002      	add	sp, #8
 8001450:	bd80      	pop	{r7, pc}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	40021000 	.word	0x40021000

08001458 <LL_RCC_PLL_GetN>:
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800145c:	4b03      	ldr	r3, [pc, #12]	; (800146c <LL_RCC_PLL_GetN+0x14>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	0a1b      	lsrs	r3, r3, #8
 8001462:	227f      	movs	r2, #127	; 0x7f
 8001464:	4013      	ands	r3, r2
}
 8001466:	0018      	movs	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40021000 	.word	0x40021000

08001470 <LL_RCC_PLL_GetR>:
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001474:	4b03      	ldr	r3, [pc, #12]	; (8001484 <LL_RCC_PLL_GetR+0x14>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	0f5b      	lsrs	r3, r3, #29
 800147a:	075b      	lsls	r3, r3, #29
}
 800147c:	0018      	movs	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	40021000 	.word	0x40021000

08001488 <LL_RCC_PLL_GetMainSource>:
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800148c:	4b03      	ldr	r3, [pc, #12]	; (800149c <LL_RCC_PLL_GetMainSource+0x14>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	2203      	movs	r2, #3
 8001492:	4013      	ands	r3, r2
}
 8001494:	0018      	movs	r0, r3
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	46c0      	nop			; (mov r8, r8)
 800149c:	40021000 	.word	0x40021000

080014a0 <LL_RCC_PLL_GetDivider>:
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80014a4:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <LL_RCC_PLL_GetDivider+0x14>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	2270      	movs	r2, #112	; 0x70
 80014aa:	4013      	ands	r3, r2
}
 80014ac:	0018      	movs	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	40021000 	.word	0x40021000

080014b8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80014c0:	f000 f866 	bl	8001590 <RCC_GetSystemClockFreq>
 80014c4:	0002      	movs	r2, r0
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	0018      	movs	r0, r3
 80014d0:	f000 f88c 	bl	80015ec <RCC_GetHCLKClockFreq>
 80014d4:	0002      	movs	r2, r0
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	0018      	movs	r0, r3
 80014e0:	f000 f89c 	bl	800161c <RCC_GetPCLK1ClockFreq>
 80014e4:	0002      	movs	r2, r0
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	609a      	str	r2, [r3, #8]
}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b002      	add	sp, #8
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b03      	cmp	r3, #3
 8001504:	d137      	bne.n	8001576 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	0018      	movs	r0, r3
 800150a:	f7ff ff93 	bl	8001434 <LL_RCC_GetUSARTClockSource>
 800150e:	0003      	movs	r3, r0
 8001510:	4a1b      	ldr	r2, [pc, #108]	; (8001580 <LL_RCC_GetUSARTClockFreq+0x8c>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d016      	beq.n	8001544 <LL_RCC_GetUSARTClockFreq+0x50>
 8001516:	4a1a      	ldr	r2, [pc, #104]	; (8001580 <LL_RCC_GetUSARTClockFreq+0x8c>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d81c      	bhi.n	8001556 <LL_RCC_GetUSARTClockFreq+0x62>
 800151c:	4a19      	ldr	r2, [pc, #100]	; (8001584 <LL_RCC_GetUSARTClockFreq+0x90>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d003      	beq.n	800152a <LL_RCC_GetUSARTClockFreq+0x36>
 8001522:	4a19      	ldr	r2, [pc, #100]	; (8001588 <LL_RCC_GetUSARTClockFreq+0x94>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d005      	beq.n	8001534 <LL_RCC_GetUSARTClockFreq+0x40>
 8001528:	e015      	b.n	8001556 <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800152a:	f000 f831 	bl	8001590 <RCC_GetSystemClockFreq>
 800152e:	0003      	movs	r3, r0
 8001530:	60fb      	str	r3, [r7, #12]
        break;
 8001532:	e020      	b.n	8001576 <LL_RCC_GetUSARTClockFreq+0x82>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8001534:	f7ff ff36 	bl	80013a4 <LL_RCC_HSI_IsReady>
 8001538:	0003      	movs	r3, r0
 800153a:	2b01      	cmp	r3, #1
 800153c:	d118      	bne.n	8001570 <LL_RCC_GetUSARTClockFreq+0x7c>
        {
          usart_frequency = HSI_VALUE;
 800153e:	4b13      	ldr	r3, [pc, #76]	; (800158c <LL_RCC_GetUSARTClockFreq+0x98>)
 8001540:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001542:	e015      	b.n	8001570 <LL_RCC_GetUSARTClockFreq+0x7c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8001544:	f7ff ff42 	bl	80013cc <LL_RCC_LSE_IsReady>
 8001548:	0003      	movs	r3, r0
 800154a:	2b01      	cmp	r3, #1
 800154c:	d112      	bne.n	8001574 <LL_RCC_GetUSARTClockFreq+0x80>
        {
          usart_frequency = LSE_VALUE;
 800154e:	2380      	movs	r3, #128	; 0x80
 8001550:	021b      	lsls	r3, r3, #8
 8001552:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001554:	e00e      	b.n	8001574 <LL_RCC_GetUSARTClockFreq+0x80>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001556:	f000 f81b 	bl	8001590 <RCC_GetSystemClockFreq>
 800155a:	0003      	movs	r3, r0
 800155c:	0018      	movs	r0, r3
 800155e:	f000 f845 	bl	80015ec <RCC_GetHCLKClockFreq>
 8001562:	0003      	movs	r3, r0
 8001564:	0018      	movs	r0, r3
 8001566:	f000 f859 	bl	800161c <RCC_GetPCLK1ClockFreq>
 800156a:	0003      	movs	r3, r0
 800156c:	60fb      	str	r3, [r7, #12]
        break;
 800156e:	e002      	b.n	8001576 <LL_RCC_GetUSARTClockFreq+0x82>
        break;
 8001570:	46c0      	nop			; (mov r8, r8)
 8001572:	e000      	b.n	8001576 <LL_RCC_GetUSARTClockFreq+0x82>
        break;
 8001574:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 8001576:	68fb      	ldr	r3, [r7, #12]
}
 8001578:	0018      	movs	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	b004      	add	sp, #16
 800157e:	bd80      	pop	{r7, pc}
 8001580:	00030003 	.word	0x00030003
 8001584:	00030001 	.word	0x00030001
 8001588:	00030002 	.word	0x00030002
 800158c:	00f42400 	.word	0x00f42400

08001590 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001596:	f7ff ff29 	bl	80013ec <LL_RCC_GetSysClkSource>
 800159a:	0003      	movs	r3, r0
 800159c:	2b08      	cmp	r3, #8
 800159e:	d002      	beq.n	80015a6 <RCC_GetSystemClockFreq+0x16>
 80015a0:	2b10      	cmp	r3, #16
 80015a2:	d003      	beq.n	80015ac <RCC_GetSystemClockFreq+0x1c>
 80015a4:	e007      	b.n	80015b6 <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <RCC_GetSystemClockFreq+0x50>)
 80015a8:	607b      	str	r3, [r7, #4]
      break;
 80015aa:	e014      	b.n	80015d6 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80015ac:	f000 f84c 	bl	8001648 <RCC_PLL_GetFreqDomain_SYS>
 80015b0:	0003      	movs	r3, r0
 80015b2:	607b      	str	r3, [r7, #4]
      break;
 80015b4:	e00f      	b.n	80015d6 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <RCC_GetSystemClockFreq+0x54>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	0adb      	lsrs	r3, r3, #11
 80015bc:	2207      	movs	r2, #7
 80015be:	4013      	ands	r3, r2
 80015c0:	2201      	movs	r2, #1
 80015c2:	409a      	lsls	r2, r3
 80015c4:	0013      	movs	r3, r2
 80015c6:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 80015c8:	6839      	ldr	r1, [r7, #0]
 80015ca:	4807      	ldr	r0, [pc, #28]	; (80015e8 <RCC_GetSystemClockFreq+0x58>)
 80015cc:	f7fe fd9a 	bl	8000104 <__udivsi3>
 80015d0:	0003      	movs	r3, r0
 80015d2:	607b      	str	r3, [r7, #4]
      break;
 80015d4:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 80015d6:	687b      	ldr	r3, [r7, #4]
}
 80015d8:	0018      	movs	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	b002      	add	sp, #8
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	007a1200 	.word	0x007a1200
 80015e4:	40021000 	.word	0x40021000
 80015e8:	00f42400 	.word	0x00f42400

080015ec <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80015f4:	f7ff ff06 	bl	8001404 <LL_RCC_GetAHBPrescaler>
 80015f8:	0003      	movs	r3, r0
 80015fa:	0a1b      	lsrs	r3, r3, #8
 80015fc:	220f      	movs	r2, #15
 80015fe:	401a      	ands	r2, r3
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <RCC_GetHCLKClockFreq+0x2c>)
 8001602:	0092      	lsls	r2, r2, #2
 8001604:	58d3      	ldr	r3, [r2, r3]
 8001606:	221f      	movs	r2, #31
 8001608:	4013      	ands	r3, r2
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	40da      	lsrs	r2, r3
 800160e:	0013      	movs	r3, r2
}
 8001610:	0018      	movs	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	b002      	add	sp, #8
 8001616:	bd80      	pop	{r7, pc}
 8001618:	080023ac 	.word	0x080023ac

0800161c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001624:	f7ff fefa 	bl	800141c <LL_RCC_GetAPB1Prescaler>
 8001628:	0003      	movs	r3, r0
 800162a:	0b1a      	lsrs	r2, r3, #12
 800162c:	4b05      	ldr	r3, [pc, #20]	; (8001644 <RCC_GetPCLK1ClockFreq+0x28>)
 800162e:	0092      	lsls	r2, r2, #2
 8001630:	58d3      	ldr	r3, [r2, r3]
 8001632:	221f      	movs	r2, #31
 8001634:	4013      	ands	r3, r2
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	40da      	lsrs	r2, r3
 800163a:	0013      	movs	r3, r2
}
 800163c:	0018      	movs	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	b002      	add	sp, #8
 8001642:	bd80      	pop	{r7, pc}
 8001644:	080023ec 	.word	0x080023ec

08001648 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001648:	b590      	push	{r4, r7, lr}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800164e:	f7ff ff1b 	bl	8001488 <LL_RCC_PLL_GetMainSource>
 8001652:	0003      	movs	r3, r0
 8001654:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	2b02      	cmp	r3, #2
 800165a:	d003      	beq.n	8001664 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	2b03      	cmp	r3, #3
 8001660:	d003      	beq.n	800166a <RCC_PLL_GetFreqDomain_SYS+0x22>
 8001662:	e005      	b.n	8001670 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001664:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8001666:	607b      	str	r3, [r7, #4]
      break;
 8001668:	e005      	b.n	8001676 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800166a:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800166c:	607b      	str	r3, [r7, #4]
      break;
 800166e:	e002      	b.n	8001676 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 8001670:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8001672:	607b      	str	r3, [r7, #4]
      break;
 8001674:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001676:	f7ff feef 	bl	8001458 <LL_RCC_PLL_GetN>
 800167a:	0002      	movs	r2, r0
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4353      	muls	r3, r2
 8001680:	001c      	movs	r4, r3
 8001682:	f7ff ff0d 	bl	80014a0 <LL_RCC_PLL_GetDivider>
 8001686:	0003      	movs	r3, r0
 8001688:	091b      	lsrs	r3, r3, #4
 800168a:	3301      	adds	r3, #1
 800168c:	0019      	movs	r1, r3
 800168e:	0020      	movs	r0, r4
 8001690:	f7fe fd38 	bl	8000104 <__udivsi3>
 8001694:	0003      	movs	r3, r0
 8001696:	001c      	movs	r4, r3
 8001698:	f7ff feea 	bl	8001470 <LL_RCC_PLL_GetR>
 800169c:	0003      	movs	r3, r0
 800169e:	0f5b      	lsrs	r3, r3, #29
 80016a0:	3301      	adds	r3, #1
 80016a2:	0019      	movs	r1, r3
 80016a4:	0020      	movs	r0, r4
 80016a6:	f7fe fd2d 	bl	8000104 <__udivsi3>
 80016aa:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80016ac:	0018      	movs	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	b003      	add	sp, #12
 80016b2:	bd90      	pop	{r4, r7, pc}
 80016b4:	00f42400 	.word	0x00f42400
 80016b8:	007a1200 	.word	0x007a1200

080016bc <LL_USART_IsEnabled>:
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2201      	movs	r2, #1
 80016ca:	4013      	ands	r3, r2
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d101      	bne.n	80016d4 <LL_USART_IsEnabled+0x18>
 80016d0:	2301      	movs	r3, #1
 80016d2:	e000      	b.n	80016d6 <LL_USART_IsEnabled+0x1a>
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	0018      	movs	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	b002      	add	sp, #8
 80016dc:	bd80      	pop	{r7, pc}

080016de <LL_USART_SetPrescaler>:
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ec:	220f      	movs	r2, #15
 80016ee:	4393      	bics	r3, r2
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	b292      	uxth	r2, r2
 80016f4:	431a      	orrs	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	46bd      	mov	sp, r7
 80016fe:	b002      	add	sp, #8
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <LL_USART_SetStopBitsLength>:
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	4a05      	ldr	r2, [pc, #20]	; (8001728 <LL_USART_SetStopBitsLength+0x24>)
 8001714:	401a      	ands	r2, r3
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	431a      	orrs	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	605a      	str	r2, [r3, #4]
}
 800171e:	46c0      	nop			; (mov r8, r8)
 8001720:	46bd      	mov	sp, r7
 8001722:	b002      	add	sp, #8
 8001724:	bd80      	pop	{r7, pc}
 8001726:	46c0      	nop			; (mov r8, r8)
 8001728:	ffffcfff 	.word	0xffffcfff

0800172c <LL_USART_SetHWFlowCtrl>:
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	4a05      	ldr	r2, [pc, #20]	; (8001750 <LL_USART_SetHWFlowCtrl+0x24>)
 800173c:	401a      	ands	r2, r3
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	431a      	orrs	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	609a      	str	r2, [r3, #8]
}
 8001746:	46c0      	nop			; (mov r8, r8)
 8001748:	46bd      	mov	sp, r7
 800174a:	b002      	add	sp, #8
 800174c:	bd80      	pop	{r7, pc}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	fffffcff 	.word	0xfffffcff

08001754 <LL_USART_SetBaudRate>:
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b0b      	cmp	r3, #11
 8001766:	d846      	bhi.n	80017f6 <LL_USART_SetBaudRate+0xa2>
  else if (BaudRate == 0U)
 8001768:	6a3b      	ldr	r3, [r7, #32]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d043      	beq.n	80017f6 <LL_USART_SetBaudRate+0xa2>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	429a      	cmp	r2, r3
 8001776:	d126      	bne.n	80017c6 <LL_USART_SetBaudRate+0x72>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	001a      	movs	r2, r3
 800177e:	4b20      	ldr	r3, [pc, #128]	; (8001800 <LL_USART_SetBaudRate+0xac>)
 8001780:	0092      	lsls	r2, r2, #2
 8001782:	58d3      	ldr	r3, [r2, r3]
 8001784:	0019      	movs	r1, r3
 8001786:	68b8      	ldr	r0, [r7, #8]
 8001788:	f7fe fcbc 	bl	8000104 <__udivsi3>
 800178c:	0003      	movs	r3, r0
 800178e:	005a      	lsls	r2, r3, #1
 8001790:	6a3b      	ldr	r3, [r7, #32]
 8001792:	085b      	lsrs	r3, r3, #1
 8001794:	18d3      	adds	r3, r2, r3
 8001796:	6a39      	ldr	r1, [r7, #32]
 8001798:	0018      	movs	r0, r3
 800179a:	f7fe fcb3 	bl	8000104 <__udivsi3>
 800179e:	0003      	movs	r3, r0
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	4a17      	ldr	r2, [pc, #92]	; (8001804 <LL_USART_SetBaudRate+0xb0>)
 80017a8:	4013      	ands	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	085b      	lsrs	r3, r3, #1
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	001a      	movs	r2, r3
 80017b4:	2307      	movs	r3, #7
 80017b6:	4013      	ands	r3, r2
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	60da      	str	r2, [r3, #12]
}
 80017c4:	e017      	b.n	80017f6 <LL_USART_SetBaudRate+0xa2>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	001a      	movs	r2, r3
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <LL_USART_SetBaudRate+0xac>)
 80017ce:	0092      	lsls	r2, r2, #2
 80017d0:	58d3      	ldr	r3, [r2, r3]
 80017d2:	0019      	movs	r1, r3
 80017d4:	68b8      	ldr	r0, [r7, #8]
 80017d6:	f7fe fc95 	bl	8000104 <__udivsi3>
 80017da:	0003      	movs	r3, r0
 80017dc:	001a      	movs	r2, r3
 80017de:	6a3b      	ldr	r3, [r7, #32]
 80017e0:	085b      	lsrs	r3, r3, #1
 80017e2:	18d3      	adds	r3, r2, r3
 80017e4:	6a39      	ldr	r1, [r7, #32]
 80017e6:	0018      	movs	r0, r3
 80017e8:	f7fe fc8c 	bl	8000104 <__udivsi3>
 80017ec:	0003      	movs	r3, r0
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	001a      	movs	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	60da      	str	r2, [r3, #12]
}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	46bd      	mov	sp, r7
 80017fa:	b006      	add	sp, #24
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	0800240c 	.word	0x0800240c
 8001804:	0000fff0 	.word	0x0000fff0

08001808 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8001808:	b590      	push	{r4, r7, lr}
 800180a:	b08b      	sub	sp, #44	; 0x2c
 800180c:	af02      	add	r7, sp, #8
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001812:	231f      	movs	r3, #31
 8001814:	18fb      	adds	r3, r7, r3
 8001816:	2201      	movs	r2, #1
 8001818:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800181a:	2300      	movs	r3, #0
 800181c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	0018      	movs	r0, r3
 8001822:	f7ff ff4b 	bl	80016bc <LL_USART_IsEnabled>
 8001826:	1e03      	subs	r3, r0, #0
 8001828:	d153      	bne.n	80018d2 <LL_USART_Init+0xca>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a2c      	ldr	r2, [pc, #176]	; (80018e0 <LL_USART_Init+0xd8>)
 8001830:	401a      	ands	r2, r3
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	6899      	ldr	r1, [r3, #8]
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	4319      	orrs	r1, r3
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	4319      	orrs	r1, r3
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	430b      	orrs	r3, r1
 8001848:	431a      	orrs	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	68da      	ldr	r2, [r3, #12]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	0011      	movs	r1, r2
 8001856:	0018      	movs	r0, r3
 8001858:	f7ff ff54 	bl	8001704 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	699a      	ldr	r2, [r3, #24]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	0011      	movs	r1, r2
 8001864:	0018      	movs	r0, r3
 8001866:	f7ff ff61 	bl	800172c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a1d      	ldr	r2, [pc, #116]	; (80018e4 <LL_USART_Init+0xdc>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d105      	bne.n	800187e <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8001872:	2003      	movs	r0, #3
 8001874:	f7ff fe3e 	bl	80014f4 <LL_RCC_GetUSARTClockFreq>
 8001878:	0003      	movs	r3, r0
 800187a:	61bb      	str	r3, [r7, #24]
 800187c:	e00b      	b.n	8001896 <LL_USART_Init+0x8e>
    }
    else if (USARTx == USART2)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a19      	ldr	r2, [pc, #100]	; (80018e8 <LL_USART_Init+0xe0>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d107      	bne.n	8001896 <LL_USART_Init+0x8e>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001886:	240c      	movs	r4, #12
 8001888:	193b      	adds	r3, r7, r4
 800188a:	0018      	movs	r0, r3
 800188c:	f7ff fe14 	bl	80014b8 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001890:	193b      	adds	r3, r7, r4
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d013      	beq.n	80018c4 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d00f      	beq.n	80018c4 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 80018a4:	231f      	movs	r3, #31
 80018a6:	18fb      	adds	r3, r7, r3
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	69dc      	ldr	r4, [r3, #28]
                           USART_InitStruct->BaudRate);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 80018b8:	69b9      	ldr	r1, [r7, #24]
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	0023      	movs	r3, r4
 80018c0:	f7ff ff48 	bl	8001754 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	0011      	movs	r1, r2
 80018cc:	0018      	movs	r0, r3
 80018ce:	f7ff ff06 	bl	80016de <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80018d2:	231f      	movs	r3, #31
 80018d4:	18fb      	adds	r3, r7, r3
 80018d6:	781b      	ldrb	r3, [r3, #0]
}
 80018d8:	0018      	movs	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	b009      	add	sp, #36	; 0x24
 80018de:	bd90      	pop	{r4, r7, pc}
 80018e0:	efff69f3 	.word	0xefff69f3
 80018e4:	40013800 	.word	0x40013800
 80018e8:	40004400 	.word	0x40004400

080018ec <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80018f6:	6839      	ldr	r1, [r7, #0]
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7fe fc03 	bl	8000104 <__udivsi3>
 80018fe:	0003      	movs	r3, r0
 8001900:	001a      	movs	r2, r3
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <LL_InitTick+0x30>)
 8001904:	3a01      	subs	r2, #1
 8001906:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001908:	4b04      	ldr	r3, [pc, #16]	; (800191c <LL_InitTick+0x30>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800190e:	4b03      	ldr	r3, [pc, #12]	; (800191c <LL_InitTick+0x30>)
 8001910:	2205      	movs	r2, #5
 8001912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001914:	46c0      	nop			; (mov r8, r8)
 8001916:	46bd      	mov	sp, r7
 8001918:	b002      	add	sp, #8
 800191a:	bd80      	pop	{r7, pc}
 800191c:	e000e010 	.word	0xe000e010

08001920 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001928:	23fa      	movs	r3, #250	; 0xfa
 800192a:	009a      	lsls	r2, r3, #2
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	0011      	movs	r1, r2
 8001930:	0018      	movs	r0, r3
 8001932:	f7ff ffdb 	bl	80018ec <LL_InitTick>
}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	46bd      	mov	sp, r7
 800193a:	b002      	add	sp, #8
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001948:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <LL_mDelay+0x44>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	60bb      	str	r3, [r7, #8]
   uint32_t tmpDelay; /* MISRAC2012-Rule-17.8 */
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800194e:	68bb      	ldr	r3, [r7, #8]
  tmpDelay  = Delay;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	60fb      	str	r3, [r7, #12]
  /* Add a period to guaranty minimum wait */
  if (tmpDelay  < LL_MAX_DELAY)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	3301      	adds	r3, #1
 8001958:	d00c      	beq.n	8001974 <LL_mDelay+0x34>
  {
    tmpDelay ++;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	3301      	adds	r3, #1
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	e008      	b.n	8001974 <LL_mDelay+0x34>
  }

  while (tmpDelay  != 0U)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001962:	4b08      	ldr	r3, [pc, #32]	; (8001984 <LL_mDelay+0x44>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	2380      	movs	r3, #128	; 0x80
 8001968:	025b      	lsls	r3, r3, #9
 800196a:	4013      	ands	r3, r2
 800196c:	d002      	beq.n	8001974 <LL_mDelay+0x34>
    {
      tmpDelay --;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	3b01      	subs	r3, #1
 8001972:	60fb      	str	r3, [r7, #12]
  while (tmpDelay  != 0U)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f3      	bne.n	8001962 <LL_mDelay+0x22>
    }
  }
}
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	46c0      	nop			; (mov r8, r8)
 800197e:	46bd      	mov	sp, r7
 8001980:	b004      	add	sp, #16
 8001982:	bd80      	pop	{r7, pc}
 8001984:	e000e010 	.word	0xe000e010

08001988 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <LL_SetSystemCoreClock+0x18>)
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	601a      	str	r2, [r3, #0]
}
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	46bd      	mov	sp, r7
 800199a:	b002      	add	sp, #8
 800199c:	bd80      	pop	{r7, pc}
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	20000000 	.word	0x20000000

080019a4 <std>:
 80019a4:	2300      	movs	r3, #0
 80019a6:	b510      	push	{r4, lr}
 80019a8:	0004      	movs	r4, r0
 80019aa:	6003      	str	r3, [r0, #0]
 80019ac:	6043      	str	r3, [r0, #4]
 80019ae:	6083      	str	r3, [r0, #8]
 80019b0:	8181      	strh	r1, [r0, #12]
 80019b2:	6643      	str	r3, [r0, #100]	; 0x64
 80019b4:	81c2      	strh	r2, [r0, #14]
 80019b6:	6103      	str	r3, [r0, #16]
 80019b8:	6143      	str	r3, [r0, #20]
 80019ba:	6183      	str	r3, [r0, #24]
 80019bc:	0019      	movs	r1, r3
 80019be:	2208      	movs	r2, #8
 80019c0:	305c      	adds	r0, #92	; 0x5c
 80019c2:	f000 fa05 	bl	8001dd0 <memset>
 80019c6:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <std+0x50>)
 80019c8:	6224      	str	r4, [r4, #32]
 80019ca:	6263      	str	r3, [r4, #36]	; 0x24
 80019cc:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <std+0x54>)
 80019ce:	62a3      	str	r3, [r4, #40]	; 0x28
 80019d0:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <std+0x58>)
 80019d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80019d4:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <std+0x5c>)
 80019d6:	6323      	str	r3, [r4, #48]	; 0x30
 80019d8:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <std+0x60>)
 80019da:	429c      	cmp	r4, r3
 80019dc:	d005      	beq.n	80019ea <std+0x46>
 80019de:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <std+0x64>)
 80019e0:	429c      	cmp	r4, r3
 80019e2:	d002      	beq.n	80019ea <std+0x46>
 80019e4:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <std+0x68>)
 80019e6:	429c      	cmp	r4, r3
 80019e8:	d103      	bne.n	80019f2 <std+0x4e>
 80019ea:	0020      	movs	r0, r4
 80019ec:	3058      	adds	r0, #88	; 0x58
 80019ee:	f000 fa6f 	bl	8001ed0 <__retarget_lock_init_recursive>
 80019f2:	bd10      	pop	{r4, pc}
 80019f4:	08001bed 	.word	0x08001bed
 80019f8:	08001c15 	.word	0x08001c15
 80019fc:	08001c4d 	.word	0x08001c4d
 8001a00:	08001c79 	.word	0x08001c79
 8001a04:	20000080 	.word	0x20000080
 8001a08:	200000e8 	.word	0x200000e8
 8001a0c:	20000150 	.word	0x20000150

08001a10 <stdio_exit_handler>:
 8001a10:	b510      	push	{r4, lr}
 8001a12:	4a03      	ldr	r2, [pc, #12]	; (8001a20 <stdio_exit_handler+0x10>)
 8001a14:	4903      	ldr	r1, [pc, #12]	; (8001a24 <stdio_exit_handler+0x14>)
 8001a16:	4804      	ldr	r0, [pc, #16]	; (8001a28 <stdio_exit_handler+0x18>)
 8001a18:	f000 f86c 	bl	8001af4 <_fwalk_sglue>
 8001a1c:	bd10      	pop	{r4, pc}
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	20000004 	.word	0x20000004
 8001a24:	080021e9 	.word	0x080021e9
 8001a28:	20000010 	.word	0x20000010

08001a2c <cleanup_stdio>:
 8001a2c:	6841      	ldr	r1, [r0, #4]
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <cleanup_stdio+0x30>)
 8001a30:	b510      	push	{r4, lr}
 8001a32:	0004      	movs	r4, r0
 8001a34:	4299      	cmp	r1, r3
 8001a36:	d001      	beq.n	8001a3c <cleanup_stdio+0x10>
 8001a38:	f000 fbd6 	bl	80021e8 <_fflush_r>
 8001a3c:	68a1      	ldr	r1, [r4, #8]
 8001a3e:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <cleanup_stdio+0x34>)
 8001a40:	4299      	cmp	r1, r3
 8001a42:	d002      	beq.n	8001a4a <cleanup_stdio+0x1e>
 8001a44:	0020      	movs	r0, r4
 8001a46:	f000 fbcf 	bl	80021e8 <_fflush_r>
 8001a4a:	68e1      	ldr	r1, [r4, #12]
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <cleanup_stdio+0x38>)
 8001a4e:	4299      	cmp	r1, r3
 8001a50:	d002      	beq.n	8001a58 <cleanup_stdio+0x2c>
 8001a52:	0020      	movs	r0, r4
 8001a54:	f000 fbc8 	bl	80021e8 <_fflush_r>
 8001a58:	bd10      	pop	{r4, pc}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	20000080 	.word	0x20000080
 8001a60:	200000e8 	.word	0x200000e8
 8001a64:	20000150 	.word	0x20000150

08001a68 <global_stdio_init.part.0>:
 8001a68:	b510      	push	{r4, lr}
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <global_stdio_init.part.0+0x28>)
 8001a6c:	4a09      	ldr	r2, [pc, #36]	; (8001a94 <global_stdio_init.part.0+0x2c>)
 8001a6e:	2104      	movs	r1, #4
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	4809      	ldr	r0, [pc, #36]	; (8001a98 <global_stdio_init.part.0+0x30>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	f7ff ff95 	bl	80019a4 <std>
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	2109      	movs	r1, #9
 8001a7e:	4807      	ldr	r0, [pc, #28]	; (8001a9c <global_stdio_init.part.0+0x34>)
 8001a80:	f7ff ff90 	bl	80019a4 <std>
 8001a84:	2202      	movs	r2, #2
 8001a86:	2112      	movs	r1, #18
 8001a88:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <global_stdio_init.part.0+0x38>)
 8001a8a:	f7ff ff8b 	bl	80019a4 <std>
 8001a8e:	bd10      	pop	{r4, pc}
 8001a90:	200001b8 	.word	0x200001b8
 8001a94:	08001a11 	.word	0x08001a11
 8001a98:	20000080 	.word	0x20000080
 8001a9c:	200000e8 	.word	0x200000e8
 8001aa0:	20000150 	.word	0x20000150

08001aa4 <__sfp_lock_acquire>:
 8001aa4:	b510      	push	{r4, lr}
 8001aa6:	4802      	ldr	r0, [pc, #8]	; (8001ab0 <__sfp_lock_acquire+0xc>)
 8001aa8:	f000 fa13 	bl	8001ed2 <__retarget_lock_acquire_recursive>
 8001aac:	bd10      	pop	{r4, pc}
 8001aae:	46c0      	nop			; (mov r8, r8)
 8001ab0:	200001c1 	.word	0x200001c1

08001ab4 <__sfp_lock_release>:
 8001ab4:	b510      	push	{r4, lr}
 8001ab6:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <__sfp_lock_release+0xc>)
 8001ab8:	f000 fa0c 	bl	8001ed4 <__retarget_lock_release_recursive>
 8001abc:	bd10      	pop	{r4, pc}
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	200001c1 	.word	0x200001c1

08001ac4 <__sinit>:
 8001ac4:	b510      	push	{r4, lr}
 8001ac6:	0004      	movs	r4, r0
 8001ac8:	f7ff ffec 	bl	8001aa4 <__sfp_lock_acquire>
 8001acc:	6a23      	ldr	r3, [r4, #32]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d002      	beq.n	8001ad8 <__sinit+0x14>
 8001ad2:	f7ff ffef 	bl	8001ab4 <__sfp_lock_release>
 8001ad6:	bd10      	pop	{r4, pc}
 8001ad8:	4b04      	ldr	r3, [pc, #16]	; (8001aec <__sinit+0x28>)
 8001ada:	6223      	str	r3, [r4, #32]
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <__sinit+0x2c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1f6      	bne.n	8001ad2 <__sinit+0xe>
 8001ae4:	f7ff ffc0 	bl	8001a68 <global_stdio_init.part.0>
 8001ae8:	e7f3      	b.n	8001ad2 <__sinit+0xe>
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	08001a2d 	.word	0x08001a2d
 8001af0:	200001b8 	.word	0x200001b8

08001af4 <_fwalk_sglue>:
 8001af4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001af6:	0014      	movs	r4, r2
 8001af8:	2600      	movs	r6, #0
 8001afa:	9000      	str	r0, [sp, #0]
 8001afc:	9101      	str	r1, [sp, #4]
 8001afe:	68a5      	ldr	r5, [r4, #8]
 8001b00:	6867      	ldr	r7, [r4, #4]
 8001b02:	3f01      	subs	r7, #1
 8001b04:	d504      	bpl.n	8001b10 <_fwalk_sglue+0x1c>
 8001b06:	6824      	ldr	r4, [r4, #0]
 8001b08:	2c00      	cmp	r4, #0
 8001b0a:	d1f8      	bne.n	8001afe <_fwalk_sglue+0xa>
 8001b0c:	0030      	movs	r0, r6
 8001b0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001b10:	89ab      	ldrh	r3, [r5, #12]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d908      	bls.n	8001b28 <_fwalk_sglue+0x34>
 8001b16:	220e      	movs	r2, #14
 8001b18:	5eab      	ldrsh	r3, [r5, r2]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	d004      	beq.n	8001b28 <_fwalk_sglue+0x34>
 8001b1e:	0029      	movs	r1, r5
 8001b20:	9800      	ldr	r0, [sp, #0]
 8001b22:	9b01      	ldr	r3, [sp, #4]
 8001b24:	4798      	blx	r3
 8001b26:	4306      	orrs	r6, r0
 8001b28:	3568      	adds	r5, #104	; 0x68
 8001b2a:	e7ea      	b.n	8001b02 <_fwalk_sglue+0xe>

08001b2c <_puts_r>:
 8001b2c:	6a03      	ldr	r3, [r0, #32]
 8001b2e:	b570      	push	{r4, r5, r6, lr}
 8001b30:	0005      	movs	r5, r0
 8001b32:	000e      	movs	r6, r1
 8001b34:	6884      	ldr	r4, [r0, #8]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <_puts_r+0x12>
 8001b3a:	f7ff ffc3 	bl	8001ac4 <__sinit>
 8001b3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b40:	07db      	lsls	r3, r3, #31
 8001b42:	d405      	bmi.n	8001b50 <_puts_r+0x24>
 8001b44:	89a3      	ldrh	r3, [r4, #12]
 8001b46:	059b      	lsls	r3, r3, #22
 8001b48:	d402      	bmi.n	8001b50 <_puts_r+0x24>
 8001b4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b4c:	f000 f9c1 	bl	8001ed2 <__retarget_lock_acquire_recursive>
 8001b50:	89a3      	ldrh	r3, [r4, #12]
 8001b52:	071b      	lsls	r3, r3, #28
 8001b54:	d502      	bpl.n	8001b5c <_puts_r+0x30>
 8001b56:	6923      	ldr	r3, [r4, #16]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d11f      	bne.n	8001b9c <_puts_r+0x70>
 8001b5c:	0021      	movs	r1, r4
 8001b5e:	0028      	movs	r0, r5
 8001b60:	f000 f8d2 	bl	8001d08 <__swsetup_r>
 8001b64:	2800      	cmp	r0, #0
 8001b66:	d019      	beq.n	8001b9c <_puts_r+0x70>
 8001b68:	2501      	movs	r5, #1
 8001b6a:	426d      	negs	r5, r5
 8001b6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b6e:	07db      	lsls	r3, r3, #31
 8001b70:	d405      	bmi.n	8001b7e <_puts_r+0x52>
 8001b72:	89a3      	ldrh	r3, [r4, #12]
 8001b74:	059b      	lsls	r3, r3, #22
 8001b76:	d402      	bmi.n	8001b7e <_puts_r+0x52>
 8001b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b7a:	f000 f9ab 	bl	8001ed4 <__retarget_lock_release_recursive>
 8001b7e:	0028      	movs	r0, r5
 8001b80:	bd70      	pop	{r4, r5, r6, pc}
 8001b82:	3601      	adds	r6, #1
 8001b84:	60a3      	str	r3, [r4, #8]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	da04      	bge.n	8001b94 <_puts_r+0x68>
 8001b8a:	69a2      	ldr	r2, [r4, #24]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	dc16      	bgt.n	8001bbe <_puts_r+0x92>
 8001b90:	290a      	cmp	r1, #10
 8001b92:	d014      	beq.n	8001bbe <_puts_r+0x92>
 8001b94:	6823      	ldr	r3, [r4, #0]
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	6022      	str	r2, [r4, #0]
 8001b9a:	7019      	strb	r1, [r3, #0]
 8001b9c:	68a3      	ldr	r3, [r4, #8]
 8001b9e:	7831      	ldrb	r1, [r6, #0]
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	2900      	cmp	r1, #0
 8001ba4:	d1ed      	bne.n	8001b82 <_puts_r+0x56>
 8001ba6:	60a3      	str	r3, [r4, #8]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	da0f      	bge.n	8001bcc <_puts_r+0xa0>
 8001bac:	0028      	movs	r0, r5
 8001bae:	0022      	movs	r2, r4
 8001bb0:	310a      	adds	r1, #10
 8001bb2:	f000 f867 	bl	8001c84 <__swbuf_r>
 8001bb6:	250a      	movs	r5, #10
 8001bb8:	3001      	adds	r0, #1
 8001bba:	d1d7      	bne.n	8001b6c <_puts_r+0x40>
 8001bbc:	e7d4      	b.n	8001b68 <_puts_r+0x3c>
 8001bbe:	0022      	movs	r2, r4
 8001bc0:	0028      	movs	r0, r5
 8001bc2:	f000 f85f 	bl	8001c84 <__swbuf_r>
 8001bc6:	3001      	adds	r0, #1
 8001bc8:	d1e8      	bne.n	8001b9c <_puts_r+0x70>
 8001bca:	e7cd      	b.n	8001b68 <_puts_r+0x3c>
 8001bcc:	250a      	movs	r5, #10
 8001bce:	6823      	ldr	r3, [r4, #0]
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	6022      	str	r2, [r4, #0]
 8001bd4:	701d      	strb	r5, [r3, #0]
 8001bd6:	e7c9      	b.n	8001b6c <_puts_r+0x40>

08001bd8 <puts>:
 8001bd8:	b510      	push	{r4, lr}
 8001bda:	4b03      	ldr	r3, [pc, #12]	; (8001be8 <puts+0x10>)
 8001bdc:	0001      	movs	r1, r0
 8001bde:	6818      	ldr	r0, [r3, #0]
 8001be0:	f7ff ffa4 	bl	8001b2c <_puts_r>
 8001be4:	bd10      	pop	{r4, pc}
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	2000005c 	.word	0x2000005c

08001bec <__sread>:
 8001bec:	b570      	push	{r4, r5, r6, lr}
 8001bee:	000c      	movs	r4, r1
 8001bf0:	250e      	movs	r5, #14
 8001bf2:	5f49      	ldrsh	r1, [r1, r5]
 8001bf4:	f000 f91a 	bl	8001e2c <_read_r>
 8001bf8:	2800      	cmp	r0, #0
 8001bfa:	db03      	blt.n	8001c04 <__sread+0x18>
 8001bfc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001bfe:	181b      	adds	r3, r3, r0
 8001c00:	6563      	str	r3, [r4, #84]	; 0x54
 8001c02:	bd70      	pop	{r4, r5, r6, pc}
 8001c04:	89a3      	ldrh	r3, [r4, #12]
 8001c06:	4a02      	ldr	r2, [pc, #8]	; (8001c10 <__sread+0x24>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	81a3      	strh	r3, [r4, #12]
 8001c0c:	e7f9      	b.n	8001c02 <__sread+0x16>
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	ffffefff 	.word	0xffffefff

08001c14 <__swrite>:
 8001c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c16:	001f      	movs	r7, r3
 8001c18:	898b      	ldrh	r3, [r1, #12]
 8001c1a:	0005      	movs	r5, r0
 8001c1c:	000c      	movs	r4, r1
 8001c1e:	0016      	movs	r6, r2
 8001c20:	05db      	lsls	r3, r3, #23
 8001c22:	d505      	bpl.n	8001c30 <__swrite+0x1c>
 8001c24:	230e      	movs	r3, #14
 8001c26:	5ec9      	ldrsh	r1, [r1, r3]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	f000 f8ea 	bl	8001e04 <_lseek_r>
 8001c30:	89a3      	ldrh	r3, [r4, #12]
 8001c32:	4a05      	ldr	r2, [pc, #20]	; (8001c48 <__swrite+0x34>)
 8001c34:	0028      	movs	r0, r5
 8001c36:	4013      	ands	r3, r2
 8001c38:	81a3      	strh	r3, [r4, #12]
 8001c3a:	0032      	movs	r2, r6
 8001c3c:	230e      	movs	r3, #14
 8001c3e:	5ee1      	ldrsh	r1, [r4, r3]
 8001c40:	003b      	movs	r3, r7
 8001c42:	f000 f907 	bl	8001e54 <_write_r>
 8001c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c48:	ffffefff 	.word	0xffffefff

08001c4c <__sseek>:
 8001c4c:	b570      	push	{r4, r5, r6, lr}
 8001c4e:	000c      	movs	r4, r1
 8001c50:	250e      	movs	r5, #14
 8001c52:	5f49      	ldrsh	r1, [r1, r5]
 8001c54:	f000 f8d6 	bl	8001e04 <_lseek_r>
 8001c58:	89a3      	ldrh	r3, [r4, #12]
 8001c5a:	1c42      	adds	r2, r0, #1
 8001c5c:	d103      	bne.n	8001c66 <__sseek+0x1a>
 8001c5e:	4a05      	ldr	r2, [pc, #20]	; (8001c74 <__sseek+0x28>)
 8001c60:	4013      	ands	r3, r2
 8001c62:	81a3      	strh	r3, [r4, #12]
 8001c64:	bd70      	pop	{r4, r5, r6, pc}
 8001c66:	2280      	movs	r2, #128	; 0x80
 8001c68:	0152      	lsls	r2, r2, #5
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	81a3      	strh	r3, [r4, #12]
 8001c6e:	6560      	str	r0, [r4, #84]	; 0x54
 8001c70:	e7f8      	b.n	8001c64 <__sseek+0x18>
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	ffffefff 	.word	0xffffefff

08001c78 <__sclose>:
 8001c78:	b510      	push	{r4, lr}
 8001c7a:	230e      	movs	r3, #14
 8001c7c:	5ec9      	ldrsh	r1, [r1, r3]
 8001c7e:	f000 f8af 	bl	8001de0 <_close_r>
 8001c82:	bd10      	pop	{r4, pc}

08001c84 <__swbuf_r>:
 8001c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c86:	0006      	movs	r6, r0
 8001c88:	000d      	movs	r5, r1
 8001c8a:	0014      	movs	r4, r2
 8001c8c:	2800      	cmp	r0, #0
 8001c8e:	d004      	beq.n	8001c9a <__swbuf_r+0x16>
 8001c90:	6a03      	ldr	r3, [r0, #32]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <__swbuf_r+0x16>
 8001c96:	f7ff ff15 	bl	8001ac4 <__sinit>
 8001c9a:	69a3      	ldr	r3, [r4, #24]
 8001c9c:	60a3      	str	r3, [r4, #8]
 8001c9e:	89a3      	ldrh	r3, [r4, #12]
 8001ca0:	071b      	lsls	r3, r3, #28
 8001ca2:	d528      	bpl.n	8001cf6 <__swbuf_r+0x72>
 8001ca4:	6923      	ldr	r3, [r4, #16]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d025      	beq.n	8001cf6 <__swbuf_r+0x72>
 8001caa:	6923      	ldr	r3, [r4, #16]
 8001cac:	6820      	ldr	r0, [r4, #0]
 8001cae:	b2ef      	uxtb	r7, r5
 8001cb0:	1ac0      	subs	r0, r0, r3
 8001cb2:	6963      	ldr	r3, [r4, #20]
 8001cb4:	b2ed      	uxtb	r5, r5
 8001cb6:	4283      	cmp	r3, r0
 8001cb8:	dc05      	bgt.n	8001cc6 <__swbuf_r+0x42>
 8001cba:	0021      	movs	r1, r4
 8001cbc:	0030      	movs	r0, r6
 8001cbe:	f000 fa93 	bl	80021e8 <_fflush_r>
 8001cc2:	2800      	cmp	r0, #0
 8001cc4:	d11d      	bne.n	8001d02 <__swbuf_r+0x7e>
 8001cc6:	68a3      	ldr	r3, [r4, #8]
 8001cc8:	3001      	adds	r0, #1
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	60a3      	str	r3, [r4, #8]
 8001cce:	6823      	ldr	r3, [r4, #0]
 8001cd0:	1c5a      	adds	r2, r3, #1
 8001cd2:	6022      	str	r2, [r4, #0]
 8001cd4:	701f      	strb	r7, [r3, #0]
 8001cd6:	6963      	ldr	r3, [r4, #20]
 8001cd8:	4283      	cmp	r3, r0
 8001cda:	d004      	beq.n	8001ce6 <__swbuf_r+0x62>
 8001cdc:	89a3      	ldrh	r3, [r4, #12]
 8001cde:	07db      	lsls	r3, r3, #31
 8001ce0:	d507      	bpl.n	8001cf2 <__swbuf_r+0x6e>
 8001ce2:	2d0a      	cmp	r5, #10
 8001ce4:	d105      	bne.n	8001cf2 <__swbuf_r+0x6e>
 8001ce6:	0021      	movs	r1, r4
 8001ce8:	0030      	movs	r0, r6
 8001cea:	f000 fa7d 	bl	80021e8 <_fflush_r>
 8001cee:	2800      	cmp	r0, #0
 8001cf0:	d107      	bne.n	8001d02 <__swbuf_r+0x7e>
 8001cf2:	0028      	movs	r0, r5
 8001cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cf6:	0021      	movs	r1, r4
 8001cf8:	0030      	movs	r0, r6
 8001cfa:	f000 f805 	bl	8001d08 <__swsetup_r>
 8001cfe:	2800      	cmp	r0, #0
 8001d00:	d0d3      	beq.n	8001caa <__swbuf_r+0x26>
 8001d02:	2501      	movs	r5, #1
 8001d04:	426d      	negs	r5, r5
 8001d06:	e7f4      	b.n	8001cf2 <__swbuf_r+0x6e>

08001d08 <__swsetup_r>:
 8001d08:	4b30      	ldr	r3, [pc, #192]	; (8001dcc <__swsetup_r+0xc4>)
 8001d0a:	b570      	push	{r4, r5, r6, lr}
 8001d0c:	0005      	movs	r5, r0
 8001d0e:	6818      	ldr	r0, [r3, #0]
 8001d10:	000c      	movs	r4, r1
 8001d12:	2800      	cmp	r0, #0
 8001d14:	d004      	beq.n	8001d20 <__swsetup_r+0x18>
 8001d16:	6a03      	ldr	r3, [r0, #32]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <__swsetup_r+0x18>
 8001d1c:	f7ff fed2 	bl	8001ac4 <__sinit>
 8001d20:	230c      	movs	r3, #12
 8001d22:	5ee2      	ldrsh	r2, [r4, r3]
 8001d24:	b293      	uxth	r3, r2
 8001d26:	0711      	lsls	r1, r2, #28
 8001d28:	d423      	bmi.n	8001d72 <__swsetup_r+0x6a>
 8001d2a:	06d9      	lsls	r1, r3, #27
 8001d2c:	d407      	bmi.n	8001d3e <__swsetup_r+0x36>
 8001d2e:	2309      	movs	r3, #9
 8001d30:	2001      	movs	r0, #1
 8001d32:	602b      	str	r3, [r5, #0]
 8001d34:	3337      	adds	r3, #55	; 0x37
 8001d36:	4313      	orrs	r3, r2
 8001d38:	81a3      	strh	r3, [r4, #12]
 8001d3a:	4240      	negs	r0, r0
 8001d3c:	bd70      	pop	{r4, r5, r6, pc}
 8001d3e:	075b      	lsls	r3, r3, #29
 8001d40:	d513      	bpl.n	8001d6a <__swsetup_r+0x62>
 8001d42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d44:	2900      	cmp	r1, #0
 8001d46:	d008      	beq.n	8001d5a <__swsetup_r+0x52>
 8001d48:	0023      	movs	r3, r4
 8001d4a:	3344      	adds	r3, #68	; 0x44
 8001d4c:	4299      	cmp	r1, r3
 8001d4e:	d002      	beq.n	8001d56 <__swsetup_r+0x4e>
 8001d50:	0028      	movs	r0, r5
 8001d52:	f000 f8c1 	bl	8001ed8 <_free_r>
 8001d56:	2300      	movs	r3, #0
 8001d58:	6363      	str	r3, [r4, #52]	; 0x34
 8001d5a:	2224      	movs	r2, #36	; 0x24
 8001d5c:	89a3      	ldrh	r3, [r4, #12]
 8001d5e:	4393      	bics	r3, r2
 8001d60:	81a3      	strh	r3, [r4, #12]
 8001d62:	2300      	movs	r3, #0
 8001d64:	6063      	str	r3, [r4, #4]
 8001d66:	6923      	ldr	r3, [r4, #16]
 8001d68:	6023      	str	r3, [r4, #0]
 8001d6a:	2308      	movs	r3, #8
 8001d6c:	89a2      	ldrh	r2, [r4, #12]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	81a3      	strh	r3, [r4, #12]
 8001d72:	6923      	ldr	r3, [r4, #16]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10b      	bne.n	8001d90 <__swsetup_r+0x88>
 8001d78:	21a0      	movs	r1, #160	; 0xa0
 8001d7a:	2280      	movs	r2, #128	; 0x80
 8001d7c:	89a3      	ldrh	r3, [r4, #12]
 8001d7e:	0089      	lsls	r1, r1, #2
 8001d80:	0092      	lsls	r2, r2, #2
 8001d82:	400b      	ands	r3, r1
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d003      	beq.n	8001d90 <__swsetup_r+0x88>
 8001d88:	0021      	movs	r1, r4
 8001d8a:	0028      	movs	r0, r5
 8001d8c:	f000 fa80 	bl	8002290 <__smakebuf_r>
 8001d90:	220c      	movs	r2, #12
 8001d92:	5ea3      	ldrsh	r3, [r4, r2]
 8001d94:	2001      	movs	r0, #1
 8001d96:	001a      	movs	r2, r3
 8001d98:	b299      	uxth	r1, r3
 8001d9a:	4002      	ands	r2, r0
 8001d9c:	4203      	tst	r3, r0
 8001d9e:	d00f      	beq.n	8001dc0 <__swsetup_r+0xb8>
 8001da0:	2200      	movs	r2, #0
 8001da2:	60a2      	str	r2, [r4, #8]
 8001da4:	6962      	ldr	r2, [r4, #20]
 8001da6:	4252      	negs	r2, r2
 8001da8:	61a2      	str	r2, [r4, #24]
 8001daa:	2000      	movs	r0, #0
 8001dac:	6922      	ldr	r2, [r4, #16]
 8001dae:	4282      	cmp	r2, r0
 8001db0:	d1c4      	bne.n	8001d3c <__swsetup_r+0x34>
 8001db2:	0609      	lsls	r1, r1, #24
 8001db4:	d5c2      	bpl.n	8001d3c <__swsetup_r+0x34>
 8001db6:	2240      	movs	r2, #64	; 0x40
 8001db8:	4313      	orrs	r3, r2
 8001dba:	81a3      	strh	r3, [r4, #12]
 8001dbc:	3801      	subs	r0, #1
 8001dbe:	e7bd      	b.n	8001d3c <__swsetup_r+0x34>
 8001dc0:	0788      	lsls	r0, r1, #30
 8001dc2:	d400      	bmi.n	8001dc6 <__swsetup_r+0xbe>
 8001dc4:	6962      	ldr	r2, [r4, #20]
 8001dc6:	60a2      	str	r2, [r4, #8]
 8001dc8:	e7ef      	b.n	8001daa <__swsetup_r+0xa2>
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	2000005c 	.word	0x2000005c

08001dd0 <memset>:
 8001dd0:	0003      	movs	r3, r0
 8001dd2:	1882      	adds	r2, r0, r2
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d100      	bne.n	8001dda <memset+0xa>
 8001dd8:	4770      	bx	lr
 8001dda:	7019      	strb	r1, [r3, #0]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	e7f9      	b.n	8001dd4 <memset+0x4>

08001de0 <_close_r>:
 8001de0:	2300      	movs	r3, #0
 8001de2:	b570      	push	{r4, r5, r6, lr}
 8001de4:	4d06      	ldr	r5, [pc, #24]	; (8001e00 <_close_r+0x20>)
 8001de6:	0004      	movs	r4, r0
 8001de8:	0008      	movs	r0, r1
 8001dea:	602b      	str	r3, [r5, #0]
 8001dec:	f7fe fecc 	bl	8000b88 <_close>
 8001df0:	1c43      	adds	r3, r0, #1
 8001df2:	d103      	bne.n	8001dfc <_close_r+0x1c>
 8001df4:	682b      	ldr	r3, [r5, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d000      	beq.n	8001dfc <_close_r+0x1c>
 8001dfa:	6023      	str	r3, [r4, #0]
 8001dfc:	bd70      	pop	{r4, r5, r6, pc}
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	200001bc 	.word	0x200001bc

08001e04 <_lseek_r>:
 8001e04:	b570      	push	{r4, r5, r6, lr}
 8001e06:	0004      	movs	r4, r0
 8001e08:	0008      	movs	r0, r1
 8001e0a:	0011      	movs	r1, r2
 8001e0c:	001a      	movs	r2, r3
 8001e0e:	2300      	movs	r3, #0
 8001e10:	4d05      	ldr	r5, [pc, #20]	; (8001e28 <_lseek_r+0x24>)
 8001e12:	602b      	str	r3, [r5, #0]
 8001e14:	f7fe fed9 	bl	8000bca <_lseek>
 8001e18:	1c43      	adds	r3, r0, #1
 8001e1a:	d103      	bne.n	8001e24 <_lseek_r+0x20>
 8001e1c:	682b      	ldr	r3, [r5, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d000      	beq.n	8001e24 <_lseek_r+0x20>
 8001e22:	6023      	str	r3, [r4, #0]
 8001e24:	bd70      	pop	{r4, r5, r6, pc}
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	200001bc 	.word	0x200001bc

08001e2c <_read_r>:
 8001e2c:	b570      	push	{r4, r5, r6, lr}
 8001e2e:	0004      	movs	r4, r0
 8001e30:	0008      	movs	r0, r1
 8001e32:	0011      	movs	r1, r2
 8001e34:	001a      	movs	r2, r3
 8001e36:	2300      	movs	r3, #0
 8001e38:	4d05      	ldr	r5, [pc, #20]	; (8001e50 <_read_r+0x24>)
 8001e3a:	602b      	str	r3, [r5, #0]
 8001e3c:	f7fe fe6b 	bl	8000b16 <_read>
 8001e40:	1c43      	adds	r3, r0, #1
 8001e42:	d103      	bne.n	8001e4c <_read_r+0x20>
 8001e44:	682b      	ldr	r3, [r5, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d000      	beq.n	8001e4c <_read_r+0x20>
 8001e4a:	6023      	str	r3, [r4, #0]
 8001e4c:	bd70      	pop	{r4, r5, r6, pc}
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	200001bc 	.word	0x200001bc

08001e54 <_write_r>:
 8001e54:	b570      	push	{r4, r5, r6, lr}
 8001e56:	0004      	movs	r4, r0
 8001e58:	0008      	movs	r0, r1
 8001e5a:	0011      	movs	r1, r2
 8001e5c:	001a      	movs	r2, r3
 8001e5e:	2300      	movs	r3, #0
 8001e60:	4d05      	ldr	r5, [pc, #20]	; (8001e78 <_write_r+0x24>)
 8001e62:	602b      	str	r3, [r5, #0]
 8001e64:	f7fe fe74 	bl	8000b50 <_write>
 8001e68:	1c43      	adds	r3, r0, #1
 8001e6a:	d103      	bne.n	8001e74 <_write_r+0x20>
 8001e6c:	682b      	ldr	r3, [r5, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d000      	beq.n	8001e74 <_write_r+0x20>
 8001e72:	6023      	str	r3, [r4, #0]
 8001e74:	bd70      	pop	{r4, r5, r6, pc}
 8001e76:	46c0      	nop			; (mov r8, r8)
 8001e78:	200001bc 	.word	0x200001bc

08001e7c <__errno>:
 8001e7c:	4b01      	ldr	r3, [pc, #4]	; (8001e84 <__errno+0x8>)
 8001e7e:	6818      	ldr	r0, [r3, #0]
 8001e80:	4770      	bx	lr
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	2000005c 	.word	0x2000005c

08001e88 <__libc_init_array>:
 8001e88:	b570      	push	{r4, r5, r6, lr}
 8001e8a:	2600      	movs	r6, #0
 8001e8c:	4c0c      	ldr	r4, [pc, #48]	; (8001ec0 <__libc_init_array+0x38>)
 8001e8e:	4d0d      	ldr	r5, [pc, #52]	; (8001ec4 <__libc_init_array+0x3c>)
 8001e90:	1b64      	subs	r4, r4, r5
 8001e92:	10a4      	asrs	r4, r4, #2
 8001e94:	42a6      	cmp	r6, r4
 8001e96:	d109      	bne.n	8001eac <__libc_init_array+0x24>
 8001e98:	2600      	movs	r6, #0
 8001e9a:	f000 fa6d 	bl	8002378 <_init>
 8001e9e:	4c0a      	ldr	r4, [pc, #40]	; (8001ec8 <__libc_init_array+0x40>)
 8001ea0:	4d0a      	ldr	r5, [pc, #40]	; (8001ecc <__libc_init_array+0x44>)
 8001ea2:	1b64      	subs	r4, r4, r5
 8001ea4:	10a4      	asrs	r4, r4, #2
 8001ea6:	42a6      	cmp	r6, r4
 8001ea8:	d105      	bne.n	8001eb6 <__libc_init_array+0x2e>
 8001eaa:	bd70      	pop	{r4, r5, r6, pc}
 8001eac:	00b3      	lsls	r3, r6, #2
 8001eae:	58eb      	ldr	r3, [r5, r3]
 8001eb0:	4798      	blx	r3
 8001eb2:	3601      	adds	r6, #1
 8001eb4:	e7ee      	b.n	8001e94 <__libc_init_array+0xc>
 8001eb6:	00b3      	lsls	r3, r6, #2
 8001eb8:	58eb      	ldr	r3, [r5, r3]
 8001eba:	4798      	blx	r3
 8001ebc:	3601      	adds	r6, #1
 8001ebe:	e7f2      	b.n	8001ea6 <__libc_init_array+0x1e>
 8001ec0:	0800243c 	.word	0x0800243c
 8001ec4:	0800243c 	.word	0x0800243c
 8001ec8:	08002440 	.word	0x08002440
 8001ecc:	0800243c 	.word	0x0800243c

08001ed0 <__retarget_lock_init_recursive>:
 8001ed0:	4770      	bx	lr

08001ed2 <__retarget_lock_acquire_recursive>:
 8001ed2:	4770      	bx	lr

08001ed4 <__retarget_lock_release_recursive>:
 8001ed4:	4770      	bx	lr
	...

08001ed8 <_free_r>:
 8001ed8:	b570      	push	{r4, r5, r6, lr}
 8001eda:	0005      	movs	r5, r0
 8001edc:	2900      	cmp	r1, #0
 8001ede:	d010      	beq.n	8001f02 <_free_r+0x2a>
 8001ee0:	1f0c      	subs	r4, r1, #4
 8001ee2:	6823      	ldr	r3, [r4, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	da00      	bge.n	8001eea <_free_r+0x12>
 8001ee8:	18e4      	adds	r4, r4, r3
 8001eea:	0028      	movs	r0, r5
 8001eec:	f000 f8e2 	bl	80020b4 <__malloc_lock>
 8001ef0:	4a1d      	ldr	r2, [pc, #116]	; (8001f68 <_free_r+0x90>)
 8001ef2:	6813      	ldr	r3, [r2, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d105      	bne.n	8001f04 <_free_r+0x2c>
 8001ef8:	6063      	str	r3, [r4, #4]
 8001efa:	6014      	str	r4, [r2, #0]
 8001efc:	0028      	movs	r0, r5
 8001efe:	f000 f8e1 	bl	80020c4 <__malloc_unlock>
 8001f02:	bd70      	pop	{r4, r5, r6, pc}
 8001f04:	42a3      	cmp	r3, r4
 8001f06:	d908      	bls.n	8001f1a <_free_r+0x42>
 8001f08:	6820      	ldr	r0, [r4, #0]
 8001f0a:	1821      	adds	r1, r4, r0
 8001f0c:	428b      	cmp	r3, r1
 8001f0e:	d1f3      	bne.n	8001ef8 <_free_r+0x20>
 8001f10:	6819      	ldr	r1, [r3, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	1809      	adds	r1, r1, r0
 8001f16:	6021      	str	r1, [r4, #0]
 8001f18:	e7ee      	b.n	8001ef8 <_free_r+0x20>
 8001f1a:	001a      	movs	r2, r3
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <_free_r+0x4e>
 8001f22:	42a3      	cmp	r3, r4
 8001f24:	d9f9      	bls.n	8001f1a <_free_r+0x42>
 8001f26:	6811      	ldr	r1, [r2, #0]
 8001f28:	1850      	adds	r0, r2, r1
 8001f2a:	42a0      	cmp	r0, r4
 8001f2c:	d10b      	bne.n	8001f46 <_free_r+0x6e>
 8001f2e:	6820      	ldr	r0, [r4, #0]
 8001f30:	1809      	adds	r1, r1, r0
 8001f32:	1850      	adds	r0, r2, r1
 8001f34:	6011      	str	r1, [r2, #0]
 8001f36:	4283      	cmp	r3, r0
 8001f38:	d1e0      	bne.n	8001efc <_free_r+0x24>
 8001f3a:	6818      	ldr	r0, [r3, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	1841      	adds	r1, r0, r1
 8001f40:	6011      	str	r1, [r2, #0]
 8001f42:	6053      	str	r3, [r2, #4]
 8001f44:	e7da      	b.n	8001efc <_free_r+0x24>
 8001f46:	42a0      	cmp	r0, r4
 8001f48:	d902      	bls.n	8001f50 <_free_r+0x78>
 8001f4a:	230c      	movs	r3, #12
 8001f4c:	602b      	str	r3, [r5, #0]
 8001f4e:	e7d5      	b.n	8001efc <_free_r+0x24>
 8001f50:	6820      	ldr	r0, [r4, #0]
 8001f52:	1821      	adds	r1, r4, r0
 8001f54:	428b      	cmp	r3, r1
 8001f56:	d103      	bne.n	8001f60 <_free_r+0x88>
 8001f58:	6819      	ldr	r1, [r3, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	1809      	adds	r1, r1, r0
 8001f5e:	6021      	str	r1, [r4, #0]
 8001f60:	6063      	str	r3, [r4, #4]
 8001f62:	6054      	str	r4, [r2, #4]
 8001f64:	e7ca      	b.n	8001efc <_free_r+0x24>
 8001f66:	46c0      	nop			; (mov r8, r8)
 8001f68:	200001c4 	.word	0x200001c4

08001f6c <sbrk_aligned>:
 8001f6c:	b570      	push	{r4, r5, r6, lr}
 8001f6e:	4e0f      	ldr	r6, [pc, #60]	; (8001fac <sbrk_aligned+0x40>)
 8001f70:	000d      	movs	r5, r1
 8001f72:	6831      	ldr	r1, [r6, #0]
 8001f74:	0004      	movs	r4, r0
 8001f76:	2900      	cmp	r1, #0
 8001f78:	d102      	bne.n	8001f80 <sbrk_aligned+0x14>
 8001f7a:	f000 f9eb 	bl	8002354 <_sbrk_r>
 8001f7e:	6030      	str	r0, [r6, #0]
 8001f80:	0029      	movs	r1, r5
 8001f82:	0020      	movs	r0, r4
 8001f84:	f000 f9e6 	bl	8002354 <_sbrk_r>
 8001f88:	1c43      	adds	r3, r0, #1
 8001f8a:	d00a      	beq.n	8001fa2 <sbrk_aligned+0x36>
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	1cc5      	adds	r5, r0, #3
 8001f90:	439d      	bics	r5, r3
 8001f92:	42a8      	cmp	r0, r5
 8001f94:	d007      	beq.n	8001fa6 <sbrk_aligned+0x3a>
 8001f96:	1a29      	subs	r1, r5, r0
 8001f98:	0020      	movs	r0, r4
 8001f9a:	f000 f9db 	bl	8002354 <_sbrk_r>
 8001f9e:	3001      	adds	r0, #1
 8001fa0:	d101      	bne.n	8001fa6 <sbrk_aligned+0x3a>
 8001fa2:	2501      	movs	r5, #1
 8001fa4:	426d      	negs	r5, r5
 8001fa6:	0028      	movs	r0, r5
 8001fa8:	bd70      	pop	{r4, r5, r6, pc}
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	200001c8 	.word	0x200001c8

08001fb0 <_malloc_r>:
 8001fb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	1ccb      	adds	r3, r1, #3
 8001fb6:	4393      	bics	r3, r2
 8001fb8:	3308      	adds	r3, #8
 8001fba:	0006      	movs	r6, r0
 8001fbc:	001f      	movs	r7, r3
 8001fbe:	2b0c      	cmp	r3, #12
 8001fc0:	d238      	bcs.n	8002034 <_malloc_r+0x84>
 8001fc2:	270c      	movs	r7, #12
 8001fc4:	42b9      	cmp	r1, r7
 8001fc6:	d837      	bhi.n	8002038 <_malloc_r+0x88>
 8001fc8:	0030      	movs	r0, r6
 8001fca:	f000 f873 	bl	80020b4 <__malloc_lock>
 8001fce:	4b38      	ldr	r3, [pc, #224]	; (80020b0 <_malloc_r+0x100>)
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	001c      	movs	r4, r3
 8001fd6:	2c00      	cmp	r4, #0
 8001fd8:	d133      	bne.n	8002042 <_malloc_r+0x92>
 8001fda:	0039      	movs	r1, r7
 8001fdc:	0030      	movs	r0, r6
 8001fde:	f7ff ffc5 	bl	8001f6c <sbrk_aligned>
 8001fe2:	0004      	movs	r4, r0
 8001fe4:	1c43      	adds	r3, r0, #1
 8001fe6:	d15e      	bne.n	80020a6 <_malloc_r+0xf6>
 8001fe8:	9b00      	ldr	r3, [sp, #0]
 8001fea:	681c      	ldr	r4, [r3, #0]
 8001fec:	0025      	movs	r5, r4
 8001fee:	2d00      	cmp	r5, #0
 8001ff0:	d14e      	bne.n	8002090 <_malloc_r+0xe0>
 8001ff2:	2c00      	cmp	r4, #0
 8001ff4:	d051      	beq.n	800209a <_malloc_r+0xea>
 8001ff6:	6823      	ldr	r3, [r4, #0]
 8001ff8:	0029      	movs	r1, r5
 8001ffa:	18e3      	adds	r3, r4, r3
 8001ffc:	0030      	movs	r0, r6
 8001ffe:	9301      	str	r3, [sp, #4]
 8002000:	f000 f9a8 	bl	8002354 <_sbrk_r>
 8002004:	9b01      	ldr	r3, [sp, #4]
 8002006:	4283      	cmp	r3, r0
 8002008:	d147      	bne.n	800209a <_malloc_r+0xea>
 800200a:	6823      	ldr	r3, [r4, #0]
 800200c:	0030      	movs	r0, r6
 800200e:	1aff      	subs	r7, r7, r3
 8002010:	0039      	movs	r1, r7
 8002012:	f7ff ffab 	bl	8001f6c <sbrk_aligned>
 8002016:	3001      	adds	r0, #1
 8002018:	d03f      	beq.n	800209a <_malloc_r+0xea>
 800201a:	6823      	ldr	r3, [r4, #0]
 800201c:	19db      	adds	r3, r3, r7
 800201e:	6023      	str	r3, [r4, #0]
 8002020:	9b00      	ldr	r3, [sp, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d040      	beq.n	80020aa <_malloc_r+0xfa>
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	42a2      	cmp	r2, r4
 800202c:	d133      	bne.n	8002096 <_malloc_r+0xe6>
 800202e:	2200      	movs	r2, #0
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	e014      	b.n	800205e <_malloc_r+0xae>
 8002034:	2b00      	cmp	r3, #0
 8002036:	dac5      	bge.n	8001fc4 <_malloc_r+0x14>
 8002038:	230c      	movs	r3, #12
 800203a:	2500      	movs	r5, #0
 800203c:	6033      	str	r3, [r6, #0]
 800203e:	0028      	movs	r0, r5
 8002040:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002042:	6821      	ldr	r1, [r4, #0]
 8002044:	1bc9      	subs	r1, r1, r7
 8002046:	d420      	bmi.n	800208a <_malloc_r+0xda>
 8002048:	290b      	cmp	r1, #11
 800204a:	d918      	bls.n	800207e <_malloc_r+0xce>
 800204c:	19e2      	adds	r2, r4, r7
 800204e:	6027      	str	r7, [r4, #0]
 8002050:	42a3      	cmp	r3, r4
 8002052:	d112      	bne.n	800207a <_malloc_r+0xca>
 8002054:	9b00      	ldr	r3, [sp, #0]
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	6863      	ldr	r3, [r4, #4]
 800205a:	6011      	str	r1, [r2, #0]
 800205c:	6053      	str	r3, [r2, #4]
 800205e:	0030      	movs	r0, r6
 8002060:	0025      	movs	r5, r4
 8002062:	f000 f82f 	bl	80020c4 <__malloc_unlock>
 8002066:	2207      	movs	r2, #7
 8002068:	350b      	adds	r5, #11
 800206a:	1d23      	adds	r3, r4, #4
 800206c:	4395      	bics	r5, r2
 800206e:	1aea      	subs	r2, r5, r3
 8002070:	429d      	cmp	r5, r3
 8002072:	d0e4      	beq.n	800203e <_malloc_r+0x8e>
 8002074:	1b5b      	subs	r3, r3, r5
 8002076:	50a3      	str	r3, [r4, r2]
 8002078:	e7e1      	b.n	800203e <_malloc_r+0x8e>
 800207a:	605a      	str	r2, [r3, #4]
 800207c:	e7ec      	b.n	8002058 <_malloc_r+0xa8>
 800207e:	6862      	ldr	r2, [r4, #4]
 8002080:	42a3      	cmp	r3, r4
 8002082:	d1d5      	bne.n	8002030 <_malloc_r+0x80>
 8002084:	9b00      	ldr	r3, [sp, #0]
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	e7e9      	b.n	800205e <_malloc_r+0xae>
 800208a:	0023      	movs	r3, r4
 800208c:	6864      	ldr	r4, [r4, #4]
 800208e:	e7a2      	b.n	8001fd6 <_malloc_r+0x26>
 8002090:	002c      	movs	r4, r5
 8002092:	686d      	ldr	r5, [r5, #4]
 8002094:	e7ab      	b.n	8001fee <_malloc_r+0x3e>
 8002096:	0013      	movs	r3, r2
 8002098:	e7c4      	b.n	8002024 <_malloc_r+0x74>
 800209a:	230c      	movs	r3, #12
 800209c:	0030      	movs	r0, r6
 800209e:	6033      	str	r3, [r6, #0]
 80020a0:	f000 f810 	bl	80020c4 <__malloc_unlock>
 80020a4:	e7cb      	b.n	800203e <_malloc_r+0x8e>
 80020a6:	6027      	str	r7, [r4, #0]
 80020a8:	e7d9      	b.n	800205e <_malloc_r+0xae>
 80020aa:	605b      	str	r3, [r3, #4]
 80020ac:	deff      	udf	#255	; 0xff
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	200001c4 	.word	0x200001c4

080020b4 <__malloc_lock>:
 80020b4:	b510      	push	{r4, lr}
 80020b6:	4802      	ldr	r0, [pc, #8]	; (80020c0 <__malloc_lock+0xc>)
 80020b8:	f7ff ff0b 	bl	8001ed2 <__retarget_lock_acquire_recursive>
 80020bc:	bd10      	pop	{r4, pc}
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	200001c0 	.word	0x200001c0

080020c4 <__malloc_unlock>:
 80020c4:	b510      	push	{r4, lr}
 80020c6:	4802      	ldr	r0, [pc, #8]	; (80020d0 <__malloc_unlock+0xc>)
 80020c8:	f7ff ff04 	bl	8001ed4 <__retarget_lock_release_recursive>
 80020cc:	bd10      	pop	{r4, pc}
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	200001c0 	.word	0x200001c0

080020d4 <__sflush_r>:
 80020d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80020d6:	898b      	ldrh	r3, [r1, #12]
 80020d8:	0005      	movs	r5, r0
 80020da:	000c      	movs	r4, r1
 80020dc:	071a      	lsls	r2, r3, #28
 80020de:	d45c      	bmi.n	800219a <__sflush_r+0xc6>
 80020e0:	684a      	ldr	r2, [r1, #4]
 80020e2:	2a00      	cmp	r2, #0
 80020e4:	dc04      	bgt.n	80020f0 <__sflush_r+0x1c>
 80020e6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80020e8:	2a00      	cmp	r2, #0
 80020ea:	dc01      	bgt.n	80020f0 <__sflush_r+0x1c>
 80020ec:	2000      	movs	r0, #0
 80020ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80020f0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80020f2:	2f00      	cmp	r7, #0
 80020f4:	d0fa      	beq.n	80020ec <__sflush_r+0x18>
 80020f6:	2200      	movs	r2, #0
 80020f8:	2080      	movs	r0, #128	; 0x80
 80020fa:	682e      	ldr	r6, [r5, #0]
 80020fc:	602a      	str	r2, [r5, #0]
 80020fe:	001a      	movs	r2, r3
 8002100:	0140      	lsls	r0, r0, #5
 8002102:	6a21      	ldr	r1, [r4, #32]
 8002104:	4002      	ands	r2, r0
 8002106:	4203      	tst	r3, r0
 8002108:	d034      	beq.n	8002174 <__sflush_r+0xa0>
 800210a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800210c:	89a3      	ldrh	r3, [r4, #12]
 800210e:	075b      	lsls	r3, r3, #29
 8002110:	d506      	bpl.n	8002120 <__sflush_r+0x4c>
 8002112:	6863      	ldr	r3, [r4, #4]
 8002114:	1ac0      	subs	r0, r0, r3
 8002116:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <__sflush_r+0x4c>
 800211c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800211e:	1ac0      	subs	r0, r0, r3
 8002120:	0002      	movs	r2, r0
 8002122:	2300      	movs	r3, #0
 8002124:	0028      	movs	r0, r5
 8002126:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002128:	6a21      	ldr	r1, [r4, #32]
 800212a:	47b8      	blx	r7
 800212c:	89a2      	ldrh	r2, [r4, #12]
 800212e:	1c43      	adds	r3, r0, #1
 8002130:	d106      	bne.n	8002140 <__sflush_r+0x6c>
 8002132:	6829      	ldr	r1, [r5, #0]
 8002134:	291d      	cmp	r1, #29
 8002136:	d82c      	bhi.n	8002192 <__sflush_r+0xbe>
 8002138:	4b2a      	ldr	r3, [pc, #168]	; (80021e4 <__sflush_r+0x110>)
 800213a:	410b      	asrs	r3, r1
 800213c:	07db      	lsls	r3, r3, #31
 800213e:	d428      	bmi.n	8002192 <__sflush_r+0xbe>
 8002140:	2300      	movs	r3, #0
 8002142:	6063      	str	r3, [r4, #4]
 8002144:	6923      	ldr	r3, [r4, #16]
 8002146:	6023      	str	r3, [r4, #0]
 8002148:	04d2      	lsls	r2, r2, #19
 800214a:	d505      	bpl.n	8002158 <__sflush_r+0x84>
 800214c:	1c43      	adds	r3, r0, #1
 800214e:	d102      	bne.n	8002156 <__sflush_r+0x82>
 8002150:	682b      	ldr	r3, [r5, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d100      	bne.n	8002158 <__sflush_r+0x84>
 8002156:	6560      	str	r0, [r4, #84]	; 0x54
 8002158:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800215a:	602e      	str	r6, [r5, #0]
 800215c:	2900      	cmp	r1, #0
 800215e:	d0c5      	beq.n	80020ec <__sflush_r+0x18>
 8002160:	0023      	movs	r3, r4
 8002162:	3344      	adds	r3, #68	; 0x44
 8002164:	4299      	cmp	r1, r3
 8002166:	d002      	beq.n	800216e <__sflush_r+0x9a>
 8002168:	0028      	movs	r0, r5
 800216a:	f7ff feb5 	bl	8001ed8 <_free_r>
 800216e:	2000      	movs	r0, #0
 8002170:	6360      	str	r0, [r4, #52]	; 0x34
 8002172:	e7bc      	b.n	80020ee <__sflush_r+0x1a>
 8002174:	2301      	movs	r3, #1
 8002176:	0028      	movs	r0, r5
 8002178:	47b8      	blx	r7
 800217a:	1c43      	adds	r3, r0, #1
 800217c:	d1c6      	bne.n	800210c <__sflush_r+0x38>
 800217e:	682b      	ldr	r3, [r5, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0c3      	beq.n	800210c <__sflush_r+0x38>
 8002184:	2b1d      	cmp	r3, #29
 8002186:	d001      	beq.n	800218c <__sflush_r+0xb8>
 8002188:	2b16      	cmp	r3, #22
 800218a:	d101      	bne.n	8002190 <__sflush_r+0xbc>
 800218c:	602e      	str	r6, [r5, #0]
 800218e:	e7ad      	b.n	80020ec <__sflush_r+0x18>
 8002190:	89a2      	ldrh	r2, [r4, #12]
 8002192:	2340      	movs	r3, #64	; 0x40
 8002194:	4313      	orrs	r3, r2
 8002196:	81a3      	strh	r3, [r4, #12]
 8002198:	e7a9      	b.n	80020ee <__sflush_r+0x1a>
 800219a:	690e      	ldr	r6, [r1, #16]
 800219c:	2e00      	cmp	r6, #0
 800219e:	d0a5      	beq.n	80020ec <__sflush_r+0x18>
 80021a0:	680f      	ldr	r7, [r1, #0]
 80021a2:	600e      	str	r6, [r1, #0]
 80021a4:	1bba      	subs	r2, r7, r6
 80021a6:	9201      	str	r2, [sp, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	079b      	lsls	r3, r3, #30
 80021ac:	d100      	bne.n	80021b0 <__sflush_r+0xdc>
 80021ae:	694a      	ldr	r2, [r1, #20]
 80021b0:	60a2      	str	r2, [r4, #8]
 80021b2:	9b01      	ldr	r3, [sp, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	dd99      	ble.n	80020ec <__sflush_r+0x18>
 80021b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80021ba:	0032      	movs	r2, r6
 80021bc:	001f      	movs	r7, r3
 80021be:	0028      	movs	r0, r5
 80021c0:	9b01      	ldr	r3, [sp, #4]
 80021c2:	6a21      	ldr	r1, [r4, #32]
 80021c4:	47b8      	blx	r7
 80021c6:	2800      	cmp	r0, #0
 80021c8:	dc06      	bgt.n	80021d8 <__sflush_r+0x104>
 80021ca:	2340      	movs	r3, #64	; 0x40
 80021cc:	2001      	movs	r0, #1
 80021ce:	89a2      	ldrh	r2, [r4, #12]
 80021d0:	4240      	negs	r0, r0
 80021d2:	4313      	orrs	r3, r2
 80021d4:	81a3      	strh	r3, [r4, #12]
 80021d6:	e78a      	b.n	80020ee <__sflush_r+0x1a>
 80021d8:	9b01      	ldr	r3, [sp, #4]
 80021da:	1836      	adds	r6, r6, r0
 80021dc:	1a1b      	subs	r3, r3, r0
 80021de:	9301      	str	r3, [sp, #4]
 80021e0:	e7e7      	b.n	80021b2 <__sflush_r+0xde>
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	dfbffffe 	.word	0xdfbffffe

080021e8 <_fflush_r>:
 80021e8:	690b      	ldr	r3, [r1, #16]
 80021ea:	b570      	push	{r4, r5, r6, lr}
 80021ec:	0005      	movs	r5, r0
 80021ee:	000c      	movs	r4, r1
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d102      	bne.n	80021fa <_fflush_r+0x12>
 80021f4:	2500      	movs	r5, #0
 80021f6:	0028      	movs	r0, r5
 80021f8:	bd70      	pop	{r4, r5, r6, pc}
 80021fa:	2800      	cmp	r0, #0
 80021fc:	d004      	beq.n	8002208 <_fflush_r+0x20>
 80021fe:	6a03      	ldr	r3, [r0, #32]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <_fflush_r+0x20>
 8002204:	f7ff fc5e 	bl	8001ac4 <__sinit>
 8002208:	220c      	movs	r2, #12
 800220a:	5ea3      	ldrsh	r3, [r4, r2]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0f1      	beq.n	80021f4 <_fflush_r+0xc>
 8002210:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002212:	07d2      	lsls	r2, r2, #31
 8002214:	d404      	bmi.n	8002220 <_fflush_r+0x38>
 8002216:	059b      	lsls	r3, r3, #22
 8002218:	d402      	bmi.n	8002220 <_fflush_r+0x38>
 800221a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800221c:	f7ff fe59 	bl	8001ed2 <__retarget_lock_acquire_recursive>
 8002220:	0028      	movs	r0, r5
 8002222:	0021      	movs	r1, r4
 8002224:	f7ff ff56 	bl	80020d4 <__sflush_r>
 8002228:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800222a:	0005      	movs	r5, r0
 800222c:	07db      	lsls	r3, r3, #31
 800222e:	d4e2      	bmi.n	80021f6 <_fflush_r+0xe>
 8002230:	89a3      	ldrh	r3, [r4, #12]
 8002232:	059b      	lsls	r3, r3, #22
 8002234:	d4df      	bmi.n	80021f6 <_fflush_r+0xe>
 8002236:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002238:	f7ff fe4c 	bl	8001ed4 <__retarget_lock_release_recursive>
 800223c:	e7db      	b.n	80021f6 <_fflush_r+0xe>
	...

08002240 <__swhatbuf_r>:
 8002240:	b570      	push	{r4, r5, r6, lr}
 8002242:	000e      	movs	r6, r1
 8002244:	001d      	movs	r5, r3
 8002246:	230e      	movs	r3, #14
 8002248:	5ec9      	ldrsh	r1, [r1, r3]
 800224a:	0014      	movs	r4, r2
 800224c:	b096      	sub	sp, #88	; 0x58
 800224e:	2900      	cmp	r1, #0
 8002250:	da0c      	bge.n	800226c <__swhatbuf_r+0x2c>
 8002252:	89b2      	ldrh	r2, [r6, #12]
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	0011      	movs	r1, r2
 8002258:	4019      	ands	r1, r3
 800225a:	421a      	tst	r2, r3
 800225c:	d013      	beq.n	8002286 <__swhatbuf_r+0x46>
 800225e:	2100      	movs	r1, #0
 8002260:	3b40      	subs	r3, #64	; 0x40
 8002262:	2000      	movs	r0, #0
 8002264:	6029      	str	r1, [r5, #0]
 8002266:	6023      	str	r3, [r4, #0]
 8002268:	b016      	add	sp, #88	; 0x58
 800226a:	bd70      	pop	{r4, r5, r6, pc}
 800226c:	466a      	mov	r2, sp
 800226e:	f000 f84d 	bl	800230c <_fstat_r>
 8002272:	2800      	cmp	r0, #0
 8002274:	dbed      	blt.n	8002252 <__swhatbuf_r+0x12>
 8002276:	23f0      	movs	r3, #240	; 0xf0
 8002278:	9901      	ldr	r1, [sp, #4]
 800227a:	021b      	lsls	r3, r3, #8
 800227c:	4019      	ands	r1, r3
 800227e:	4b03      	ldr	r3, [pc, #12]	; (800228c <__swhatbuf_r+0x4c>)
 8002280:	18c9      	adds	r1, r1, r3
 8002282:	424b      	negs	r3, r1
 8002284:	4159      	adcs	r1, r3
 8002286:	2380      	movs	r3, #128	; 0x80
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	e7ea      	b.n	8002262 <__swhatbuf_r+0x22>
 800228c:	ffffe000 	.word	0xffffe000

08002290 <__smakebuf_r>:
 8002290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002292:	2602      	movs	r6, #2
 8002294:	898b      	ldrh	r3, [r1, #12]
 8002296:	0005      	movs	r5, r0
 8002298:	000c      	movs	r4, r1
 800229a:	4233      	tst	r3, r6
 800229c:	d006      	beq.n	80022ac <__smakebuf_r+0x1c>
 800229e:	0023      	movs	r3, r4
 80022a0:	3347      	adds	r3, #71	; 0x47
 80022a2:	6023      	str	r3, [r4, #0]
 80022a4:	6123      	str	r3, [r4, #16]
 80022a6:	2301      	movs	r3, #1
 80022a8:	6163      	str	r3, [r4, #20]
 80022aa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80022ac:	466a      	mov	r2, sp
 80022ae:	ab01      	add	r3, sp, #4
 80022b0:	f7ff ffc6 	bl	8002240 <__swhatbuf_r>
 80022b4:	9900      	ldr	r1, [sp, #0]
 80022b6:	0007      	movs	r7, r0
 80022b8:	0028      	movs	r0, r5
 80022ba:	f7ff fe79 	bl	8001fb0 <_malloc_r>
 80022be:	2800      	cmp	r0, #0
 80022c0:	d108      	bne.n	80022d4 <__smakebuf_r+0x44>
 80022c2:	220c      	movs	r2, #12
 80022c4:	5ea3      	ldrsh	r3, [r4, r2]
 80022c6:	059a      	lsls	r2, r3, #22
 80022c8:	d4ef      	bmi.n	80022aa <__smakebuf_r+0x1a>
 80022ca:	2203      	movs	r2, #3
 80022cc:	4393      	bics	r3, r2
 80022ce:	431e      	orrs	r6, r3
 80022d0:	81a6      	strh	r6, [r4, #12]
 80022d2:	e7e4      	b.n	800229e <__smakebuf_r+0xe>
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	89a2      	ldrh	r2, [r4, #12]
 80022d8:	6020      	str	r0, [r4, #0]
 80022da:	4313      	orrs	r3, r2
 80022dc:	81a3      	strh	r3, [r4, #12]
 80022de:	9b00      	ldr	r3, [sp, #0]
 80022e0:	6120      	str	r0, [r4, #16]
 80022e2:	6163      	str	r3, [r4, #20]
 80022e4:	9b01      	ldr	r3, [sp, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00c      	beq.n	8002304 <__smakebuf_r+0x74>
 80022ea:	0028      	movs	r0, r5
 80022ec:	230e      	movs	r3, #14
 80022ee:	5ee1      	ldrsh	r1, [r4, r3]
 80022f0:	f000 f81e 	bl	8002330 <_isatty_r>
 80022f4:	2800      	cmp	r0, #0
 80022f6:	d005      	beq.n	8002304 <__smakebuf_r+0x74>
 80022f8:	2303      	movs	r3, #3
 80022fa:	89a2      	ldrh	r2, [r4, #12]
 80022fc:	439a      	bics	r2, r3
 80022fe:	3b02      	subs	r3, #2
 8002300:	4313      	orrs	r3, r2
 8002302:	81a3      	strh	r3, [r4, #12]
 8002304:	89a3      	ldrh	r3, [r4, #12]
 8002306:	433b      	orrs	r3, r7
 8002308:	81a3      	strh	r3, [r4, #12]
 800230a:	e7ce      	b.n	80022aa <__smakebuf_r+0x1a>

0800230c <_fstat_r>:
 800230c:	2300      	movs	r3, #0
 800230e:	b570      	push	{r4, r5, r6, lr}
 8002310:	4d06      	ldr	r5, [pc, #24]	; (800232c <_fstat_r+0x20>)
 8002312:	0004      	movs	r4, r0
 8002314:	0008      	movs	r0, r1
 8002316:	0011      	movs	r1, r2
 8002318:	602b      	str	r3, [r5, #0]
 800231a:	f7fe fc3f 	bl	8000b9c <_fstat>
 800231e:	1c43      	adds	r3, r0, #1
 8002320:	d103      	bne.n	800232a <_fstat_r+0x1e>
 8002322:	682b      	ldr	r3, [r5, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d000      	beq.n	800232a <_fstat_r+0x1e>
 8002328:	6023      	str	r3, [r4, #0]
 800232a:	bd70      	pop	{r4, r5, r6, pc}
 800232c:	200001bc 	.word	0x200001bc

08002330 <_isatty_r>:
 8002330:	2300      	movs	r3, #0
 8002332:	b570      	push	{r4, r5, r6, lr}
 8002334:	4d06      	ldr	r5, [pc, #24]	; (8002350 <_isatty_r+0x20>)
 8002336:	0004      	movs	r4, r0
 8002338:	0008      	movs	r0, r1
 800233a:	602b      	str	r3, [r5, #0]
 800233c:	f7fe fc3c 	bl	8000bb8 <_isatty>
 8002340:	1c43      	adds	r3, r0, #1
 8002342:	d103      	bne.n	800234c <_isatty_r+0x1c>
 8002344:	682b      	ldr	r3, [r5, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d000      	beq.n	800234c <_isatty_r+0x1c>
 800234a:	6023      	str	r3, [r4, #0]
 800234c:	bd70      	pop	{r4, r5, r6, pc}
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	200001bc 	.word	0x200001bc

08002354 <_sbrk_r>:
 8002354:	2300      	movs	r3, #0
 8002356:	b570      	push	{r4, r5, r6, lr}
 8002358:	4d06      	ldr	r5, [pc, #24]	; (8002374 <_sbrk_r+0x20>)
 800235a:	0004      	movs	r4, r0
 800235c:	0008      	movs	r0, r1
 800235e:	602b      	str	r3, [r5, #0]
 8002360:	f7fe fc3e 	bl	8000be0 <_sbrk>
 8002364:	1c43      	adds	r3, r0, #1
 8002366:	d103      	bne.n	8002370 <_sbrk_r+0x1c>
 8002368:	682b      	ldr	r3, [r5, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d000      	beq.n	8002370 <_sbrk_r+0x1c>
 800236e:	6023      	str	r3, [r4, #0]
 8002370:	bd70      	pop	{r4, r5, r6, pc}
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	200001bc 	.word	0x200001bc

08002378 <_init>:
 8002378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800237a:	46c0      	nop			; (mov r8, r8)
 800237c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800237e:	bc08      	pop	{r3}
 8002380:	469e      	mov	lr, r3
 8002382:	4770      	bx	lr

08002384 <_fini>:
 8002384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800238a:	bc08      	pop	{r3}
 800238c:	469e      	mov	lr, r3
 800238e:	4770      	bx	lr
